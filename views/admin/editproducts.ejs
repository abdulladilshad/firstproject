<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Product</title>
    <link rel="stylesheet" href="/styles/addproducts.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
</head>

<body>
    <div class="dashboard-container">

        <!-- Add this button at the start of your dashboard-container -->
<button id="hamburger" class="hamburger-menu">
    <span></span>
    <span></span>
    <span></span>
</button>

<div class="dashboard-container">
    <div class="overlay" id="overlay"></div>
    <aside class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <h2>PRODUCTS</h2>
            <button class="close-sidebar" id="closeSidebar">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <!-- Rest of your sidebar content -->
    </aside>
    <!-- Rest of your content -->
</div>

        <aside class="sidebar">
            <div class="sidebar-header">
                <h2>PRODUCTS</h2>
            </div>
            <ul class="sidebar-menu">
                <li><a href="/admin/dashboard">
                        <i class="fas fa-home"></i> Dashboard
                    </a></li>
                <li><a href="/admin/products" class="active">
                        <i class="fas fa-box"></i> Products
                    </a></li>
                <li><a href="/orders">
                        <i class="fas fa-shopping-cart"></i> Orders
                    </a></li>
                <li><a href="/admin/users">
                        <i class="fas fa-users"></i> Users
                    </a></li>
                <li><a href="/admin/categories">
                        <i class="fas fa-tags"></i> Category
                    </a></li>
                <li><a href="/offers">
                        <i class="fas fa-gift"></i> Offers
                    </a></li>
                <li><a href="/coupons">
                        <i class="fas fa-ticket-alt"></i> Coupons
                    </a></li>
                <li><a href="/settings">
                        <i class="fas fa-cog"></i> Settings
                    </a></li>
                <li><a href="/logout">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </a></li>
            </ul>
        </aside>
        <main class="main-content">
            <header class="topbar">
                <h1>Edit Product</h1>
            </header>
            <section class="add-product-form">
                <form id="productForm" action="/admin/editproducttt" method="POST">
                    <!-- Product Name -->
                    <div class="form-group">
                        <label for="productName">Product Name</label>
                        <input type="text" id="productName" name="productId" value="<%= products._id %>" hidden>
                        <input type="text" id="productName" name="productName" value="<%= products.productName %>">
                        <div class="error-message" id="productNameError" style="display:none; color: red;">Product name
                            is required</div>
                        <% if (errorMessage) { %>
                            <div style="color: red; margin-bottom: 15px;">
                                <%= errorMessage %>
                            </div>
                            <% } %>
                    </div>

                    <!-- Category -->
                    <div class="form-group">
                        <label for="category">Category</label>
                        <select id="category" name="category">
                            <% categories.forEach(category=> { %>
                                <option value="<%= category._id %>"
                                    <%=category._id.toString()===products.category.toString() ? "selected" : "" %>>
                                    <%= category.name %>
                                </option>
                                <% }) %>
                        </select>

                        <div class="error-message" id="categoryError" style="display:none; color: red;">Category is
                            required</div>
                    </div>

                    <!-- Price -->
                    <div class="form-group">
                        <label for="price">Price ($)</label>
                        <input type="number" id="price" name="price" value="<%= products.price %>">
                        <div class="error-message" id="priceError" style="display:none; color: red;">Price is required
                        </div>
                    </div>

                    <!-- Brand -->
                    <div class="form-group">
                        <label for="brand">Brand</label>
                        <input type="text" id="brand" name="brand" value="<%= products.brand %>">
                        <div class="error-message" id="brandError" style="display:none; color: red;">Brand is required
                        </div>
                    </div>

                    <!-- coming -->
                    <div class="form-group">
                        <button type="button" id="openVariantModal" class="variant-button">Color & Stock</button>
                        <div id="variantsList" class="variants-summary mt-2">
                            <% if (products.variants && products.variants.length> 0) { %>
                                <% products.variants.forEach(variant=> { %>
                                    <p><strong>
                                            <%= variant.color %>
                                        </strong>: <%= variant.quantity%> in stock</p>
                                    <% }) %>
                                        <% } else { %>
                                            <p>No variants added yet.</p>
                                            <% } %>
                        </div>
                    </div>

                    <!-- Variant Modal -->
                    <div id="variantModal" class="modal" style="display: none">
                        <div class="modal-content">
                            <span class="close-modal">&times;</span>
                            <h2>Add Color & Stock</h2>
                            <div class="variant-form">
                                <div class="form-group">
                                    <label for="colorInput">Color</label>
                                    <select id="colorInput" name="color">
                                        <option value="">Select Color</option>
                                        <option value="Red">Red</option>
                                        <option value="Blue">Blue</option>
                                        <option value="Green">Green</option>
                                        <option value="Black">Black</option>
                                        <option value="White">White</option>
                                        <option value="Yellow">Yellow</option>
                                        <option value="White gold">White gold</option>
                                        <option value="gold">gold</option>
                                        <option value="brown">brown</option>
                                        <option value="silver">silver</option>
                                    </select>
                                    <div class="error-message" id="colorEx" style="display:none; color: red;">Alredy
                                        exist this color
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="stockInput">Stock Quantity</label>
                                    <input type="number" id="stockInput" name="stock" min="0">
                                </div>
                                <button type="button" id="addVariant" class="add-variant-btn">Add Variant</button>
                            </div>
                            <div class="variants-list">
                                <h3>Added Variants</h3>
                                <div id="modalVariantsList">
                                    <% if (products.variants && products.variants.length> 0) { %>
                                        <% products.variants.forEach((variant, index)=> { %>
                                            <div class="variant-item" data-index="<%= index %>">
                                                <p><strong>
                                                        <%= variant.color %>
                                                    </strong>: <%= variant.quantity %> in stock</p>
                                                <button type="button" class="remove-variant-btn"
                                                    onclick="removeVariant('<%= index %>')">Remove</button>
                                            </div>
                                            <% }) %>
                                                <% } %>
                                </div>
                            </div>
                            <div class="modal-actions">
                                <button type="button" id="saveVariants" class="save-variants-btn">Save Variants</button>
                            </div>
                        </div>
                    </div>
                    <!-- Hidden Input for Variants Data -->
                    <input type="hidden" id="variantsData" name="variants"
                        value='<%= JSON.stringify(products.variants || []) %>'>

                    <!-- Material -->
                    <div class="form-group">
                        <label for="material">Material</label>
                        <input type="text" id="material" name="material" value="<%= products.material %>">
                        <div class="error-message" id="materialError" style="display:none; color: red;">Material is
                            required</div>
                    </div>

                    <!-- Product Description -->
                    <div class="form-group">
                        <label for="productDescription">Product Description</label>
                        <textarea id="productDescription" name="productDescription"
                            rows="5"><%= products.productDescription %></textarea>
                        <div class="error-message" id="productDescriptionError" style="display:none; color: red;">
                            Description is required</div>
                    </div>

                    <!-- Product Images -->
                    <div style="margin: 2%;" class="max-w-6xl mx-auto bg-white rounded-xl shadow-lg p-8">
                        <div class="flex items-center justify-between mb-8">
                            <h2 class="text-2xl font-bold text-gray-800">Product Images</h2>
                            <span class="text-sm text-gray-500">Upload up to 4 images</span>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                            <% for(let i=0; i < 4; i++) { const imagePath=products.imagePaths[i] || '' ; %>

                                <div id="imageUploadSection<%= i + 1 %>" class="relative group">
                                    <div
                                        class="min-h-[300px] bg-gray-50 border-2 border-dashed border-gray-300 rounded-xl p-6 transition-all duration-300 hover:border-blue-500 hover:bg-gray-100">
                                        <label for="imageUpload<%= i + 1 %>" class="block h-full">
                                            <div
                                                class="flex flex-col items-center justify-center h-full space-y-4 cursor-pointer">
                                                <!-- Upload Icon -->
                                                <div
                                                    class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center">
                                                    <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor"
                                                        viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round"
                                                            stroke-width="2"
                                                            d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                                    </svg>
                                                </div>
                                                <!-- Upload Text -->
                                                <div class="text-center">
                                                    <p class="text-sm font-medium text-gray-700">Image <%= i + 1 %>
                                                    </p>
                                                    <p class="mt-1 text-xs text-gray-500">Drop your image here, or click
                                                        to browse</p>
                                                    <p class="mt-2 text-xs text-gray-400">PNG, JPG up to 5MB</p>
                                                </div>
                                            </div>
                                        </label>

                                        <!-- Current Image Preview -->
                                        <div
                                            class="relative w-full h-[200px] overflow-hidden border border-gray-300 rounded-lg">
                                            <% if (imagePath) { %>
                                                <img id="cropperImage<%= i + 1 %>"
                                                    class="absolute inset-0 w-full h-full object-contain"
                                                    src="/<%= imagePath %>" style="display:block;">
                                                <% } else { %>
                                                    <img id="cropperImage<%= i + 1 %>"
                                                        class="absolute inset-0 w-full h-full object-contain"
                                                        src="/path/to/default/image.jpg" style="display:none;">
                                                    <% } %>
                                        </div>

                                        <input type="file" id="imageUpload<%= i + 1 %>" accept="image/*" class="hidden">
                                        <input type="hidden" name="existingImages[]" value="<%= imagePath %>">
                                    </div>
                                    <div id="previewContainer<%= i %>" class="mt-4 hidden">
                                        <div class="bg-gray-50 rounded-lg p-4">
                                            <h3 class="text-sm font-medium text-gray-700 mb-3">Preview</h3>
                                            <img id="croppedPreview<%= i %>"
                                                class="w-full rounded-lg shadow-sm object-cover max-h-[200px]">
                                        </div>
                                    </div>
                                    <!-- Action Buttons -->
                                    <div class="flex items-center gap-3 mt-4">
                                        <button id="cropButton<%= i + 1 %>" type="button" disabled
                                            class="flex items-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                                            Crop
                                        </button>
                                        <button onclick="abra('<%= i %>')" id="resetButton<%= i + 1 %>" type="button"
                                            disabled
                                            class="flex items-center px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor"
                                                viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                    d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                                            </svg>
                                            Reset
                                        </button>

                                    </div>
                                </div>
                                <% } %>
                        </div>
                    </div>

                    <!-- Hidden Inputs for Base64 Images -->
                    <% for (let index=0; index < 4; index++) { %>
                        <input type="hidden" id="image<%= index + 1 %>" name="image<%= index + 1 %>">
                        <% } %>


                            <!-- Submit and Cancel Buttons -->
                            <div class="form-actions">
                                <button type="submit" class="submit-button">Edit</button>
                                <button type="button" class="cancel-button"
                                    onclick="window.history.back()">Cancel</button>
                            </div>
                </form>


            </section>
        </main>
    </div>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.16/cropper.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
        let croppers = [];
        let croppedImages = {};

        const imageUploads = [
            { upload: document.getElementById('imageUpload1'), image: document.getElementById('cropperImage1'), cropBtn: document.getElementById('cropButton1'), resetBtn: document.getElementById('resetButton1'), deleteBtn: document.getElementById('deleteButton1'), error: document.getElementById('imageError1') },
            { upload: document.getElementById('imageUpload2'), image: document.getElementById('cropperImage2'), cropBtn: document.getElementById('cropButton2'), resetBtn: document.getElementById('resetButton2'), deleteBtn: document.getElementById('deleteButton2'), error: document.getElementById('imageError2') },
            { upload: document.getElementById('imageUpload3'), image: document.getElementById('cropperImage3'), cropBtn: document.getElementById('cropButton3'), resetBtn: document.getElementById('resetButton3'), deleteBtn: document.getElementById('deleteButton3'), error: document.getElementById('imageError3') },
            { upload: document.getElementById('imageUpload4'), image: document.getElementById('cropperImage4'), cropBtn: document.getElementById('cropButton4'), resetBtn: document.getElementById('resetButton4'), deleteBtn: document.getElementById('deleteButton4'), error: document.getElementById('imageError4') },
        ];

        imageUploads.forEach((item, index) => {
            item.upload.addEventListener('change', function (e) {
                const file = e.target.files[0];
                if (!file) {
                    item.error.textContent = "Image is required";
                    item.error.style.display = 'block';
                    return;
                }
                const reader = new FileReader();

                reader.onload = function (event) {
                    item.image.src = event.target.result;
                    item.image.style.display = 'block';

                    if (croppers[index]) {
                        croppers[index].destroy();
                    }

                    croppers[index] = new Cropper(item.image, {
                        viewMode: 1,
                        dragMode: 'move',
                        autoCropArea: 0.8,
                        restore: true,
                        guides: true,
                        center: true,
                        highlight: true,
                        cropBoxMovable: true,
                        cropBoxResizable: true,
                    });

                    item.cropBtn.disabled = false;
                    item.resetBtn.disabled = false;
                    item.error.style.display = 'none';
                };

                reader.readAsDataURL(file);
            });

            item.cropBtn.addEventListener('click', function () {
                const cropper = croppers[index];
                if (!cropper) return;

                const croppedCanvas = cropper.getCroppedCanvas();
                if (!croppedCanvas) {
                    item.error.style.display = 'block';
                    return;
                }

                const base64Image = croppedCanvas.toDataURL();
                croppedImages[`image${index + 1}`] = base64Image;

                // Store cropped image in hidden input field
                document.getElementById(`image${index + 1}`).value = base64Image;

                // Show the cropped image preview below the crop button
                //huhu
                const previewContainer = document.getElementById(`previewContainer${index}`);
                const previewImage = document.getElementById(`cropperImage${index + 1}`);

                const a = document.getElementById(`croppedPreview${index}`)
                a.src = base64Image;
                previewContainer.style.display = 'block';  // Show preview container
            });

            item.resetBtn.addEventListener('click', function () {
                croppers[index].reset();
                item.error.style.display = 'none';

                // Hide preview if reset is clicked
                const previewContainer = document.getElementById(`previewContainer${index + 1}`);
                previewContainer.style.display = 'none';
            });


        });

        // Form validation logic
        const form = document.getElementById('productForm');
        form.addEventListener('submit', function (e) {

            let valid = true;
            // Hide all previous error messages
            document.querySelectorAll('.error-message').forEach((el) => {
                el.style.display = 'none';
            });

            // Validate text fields (name, category, price, etc.)
            const fields = [
                { field: 'productName', error: 'productNameError' },
                { field: 'category', error: 'categoryError' },
                { field: 'brand', error: 'brandError' },
                { field: 'material', error: 'materialError' },
                { field: 'productDescription', error: 'productDescriptionError' },
            ];

            fields.forEach((field) => {
                const input = document.getElementById(field.field);
                if (!input.value.trim()) {
                    document.getElementById(field.error).style.display = 'block';
                    valid = false;
                }
            });

            // Validate Price (should be greater than 0)
            const priceInput = document.getElementById('price');
            const priceValue = parseFloat(priceInput.value);
            if (isNaN(priceValue) || priceValue < 0 || priceValue === 0) {
                document.getElementById('priceError').textContent = 'Price must be greater than zero';
                document.getElementById('priceError').style.display = 'block';
                valid = false;
            }
            if (!valid) {
                e.preventDefault();
            }
            // Validate that at least one image has been uploaded
            if (!croppedImages.image1 && !croppedImages.image2 && !croppedImages.image3 && !croppedImages.image4) {
                imageUploads.forEach((item) => {
                    item.error.style.display = 'block';
                });
                valid = false;
            }
            if (!valid) {
                e.preventDefault();
            }
        });
        document.addEventListener('DOMContentLoaded', function () {
            const modal = document.getElementById('variantModal');
            const openBtn = document.getElementById('openVariantModal');
            const closeBtn = document.querySelector('.close-modal');
            const addVariantBtn = document.getElementById('addVariant');
            const saveVariantsBtn = document.getElementById('saveVariants');
            const variantsData = [];

            openBtn.onclick = function () {
                modal.style.display = "block";
            }

            closeBtn.onclick = function () {
                modal.style.display = "none";
            }

            window.onclick = function (event) {
                if (event.target == modal) {
                    modal.style.display = "none";
                }
            }

            addVariantBtn.onclick = function () {
                const color = document.getElementById('colorInput').value;
                const stock = document.getElementById('stockInput').value;
                const colorEx = document.getElementById('colorEx');
                const existingVariantsList = document.getElementById('variantsList');
                
                // Get existing variants from the hidden input
                let existingVariants = [];
                try {
                    existingVariants = JSON.parse(document.getElementById('variantsData').value);
                } catch (e) {
                    existingVariants = [];
                }

                // Hide any previous error message
                colorEx.style.display = 'none';

                // Check if color exists in existing variants
                if (existingVariants.some(variant => variant.color.toLowerCase() === color.toLowerCase())) {
                    colorEx.style.display = 'block';
                    return;
                }

                if (!color || stock === '') {
                    alert("Color and Stock are required!");
                    return;
                }

                if (parseInt(stock) <= 0) {
                    alert("Stock must be greater than 0!");
                    return;
                }

                // Add new variant to existing variants
                existingVariants.push({ color, quantity: parseInt(stock) });
                
                // Update variantsData with combined variants
                variantsData.length = 0;
                variantsData.push(...existingVariants);
                
                updateVariantsList();
                document.getElementById('colorInput').value = '';
                document.getElementById('stockInput').value = '';
            };
            saveVariantsBtn.onclick = function () {
                if (variantsData.length === 0) {
                    alert("Please add at least one variant.");
                    return;
                }

                document.getElementById('variantsData').value = JSON.stringify(variantsData);
                updateVariantsSummary();
                modal.style.display = "none";
            };

            function updateVariantsList() {
                const list = document.getElementById('modalVariantsList');
                list.innerHTML = variantsData.map((variant, index) => `
            <div class="variant-item">
                Color: ${variant.color}, Stock: ${variant.quantity}
                <button onclick="removeVariant(${index})">Remove</button>
            </div>
        `).join('');
            }

            function updateVariantsSummary() {
                const summary = document.getElementById('variantsList');
                summary.innerHTML = variantsData.map(variant =>
                    `<div>Color: ${variant.color}, Stock: ${variant.quantity}</div>`
                ).join('');
            }

            window.removeVariant = function (index) {
                variantsData.splice(index, 1);
                updateVariantsList();
            }
        });


        document.getElementById('addProductForm').onsubmit = function (event) {
            alert(2)
            try {
                const variantsField = document.getElementById('variantsData');
                let variantsData = variantsField.value.trim(); // Get value & remove spaces

                if (!variantsData) {
                    alert("Variants data is missing!");
                    event.preventDefault();
                    return;
                }

                let parsedVariants = JSON.parse(variantsData);

                if (!Array.isArray(parsedVariants)) {
                    alert("Invalid format: Variants must be an array!");
                    event.preventDefault();
                    return;
                }

                for (let variant of parsedVariants) {
                    if (!variant.color || variant.quantity <= 0) {
                        alert("Each variant must have a color and stock > 0!");
                        event.preventDefault();
                        return;
                    }
                }
            } catch (error) {
                alert("Error parsing variants data: " + error.message);
                event.preventDefault();
            }
        };

        document.getElementById("productForm").onsubmit = function (event) {
            alert(3)
            try {
                const variantsData = JSON.stringify(variantsArray); // Convert array to JSON
                document.getElementById("variantsData").value = variantsData; // Assign JSON to hidden field
            } catch (error) {
                console.error("Error setting variants JSON:", error);
                event.preventDefault(); // Stop form submission if JSON conversion fails
                alert("Invalid variants format. Please check your selections.");
            }
        };

        document.getElementById('productForm').addEventListener('submit', function (event) {
            alert(4)
            const variantsData = document.getElementById('variantsData').value.trim();
            const variantsError = document.getElementById('variantsError');

            try {
                const variants = JSON.parse(variantsData); // Try parsing JSON

                if (!Array.isArray(variants) || variants.length === 0) {
                    throw new Error(); // If not an array or empty, trigger error
                }

                variantsError.style.display = "none"; // Hide error if valid
            } catch (error) {
                variantsError.style.display = "block"; // Show error message
                event.preventDefault(); // Stop form submission
            }
        });

        function abra(imagenumber) {



            document.getElementById(`image${+imagenumber + 1}`).value = '';

            const h = document.getElementById(`previewContainer${imagenumber}`)
            h.style.display = 'none'
        }

        document.addEventListener('DOMContentLoaded', function() {
    const hamburger = document.getElementById('hamburger');
    const sidebar = document.getElementById('sidebar');
    const overlay = document.getElementById('overlay');
    const closeSidebar = document.getElementById('closeSidebar');

    function toggleSidebar() {
        hamburger.classList.toggle('active');
        sidebar.classList.toggle('active');
        overlay.classList.toggle('active');
        document.body.style.overflow = sidebar.classList.contains('active') ? 'hidden' : '';
    }

    hamburger.addEventListener('click', toggleSidebar);
    closeSidebar.addEventListener('click', toggleSidebar);
    overlay.addEventListener('click', toggleSidebar);

    // Close sidebar on window resize if screen becomes larger
    window.addEventListener('resize', function() {
        if (window.innerWidth > 768 && sidebar.classList.contains('active')) {
            toggleSidebar();
        }
    });

    // Add smooth hover effect for menu items
    const menuItems = document.querySelectorAll('.sidebar-menu li a');
    menuItems.forEach(item => {
        item.addEventListener('mouseenter', function() {
            this.style.transform = 'translateX(5px)';
        });
        item.addEventListener('mouseleave', function() {
            this.style.transform = 'translateX(0)';
        });
    });
});

    </script>
</body>

</html>