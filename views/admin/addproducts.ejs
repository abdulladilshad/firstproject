<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Product</title>
    <link rel="stylesheet" href="/styles/addproducts.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
</head>

<body>
    <div class="dashboard-container">

        <!-- Add this button at the start of your dashboard-container -->
<button id="hamburger" class="hamburger-menu">
    <span></span>
    <span></span>
    <span></span>
</button>

<div class="dashboard-container">
    <div class="overlay" id="overlay"></div>
    <aside class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <h2>PRODUCTS</h2>
            <button class="close-sidebar" id="closeSidebar">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <!-- Rest of your sidebar content -->
    </aside>
    <!-- Rest of your content -->
</div>

        <aside class="sidebar">
            <div class="sidebar-header">
                <h2>PRODUCTS</h2>
            </div>
            <ul class="sidebar-menu">
                <li><a href="/admin/dashboard">
                        <i class="fas fa-home"></i> Dashboard
                    </a></li>
                <li><a href="/admin/products" class="active">
                        <i class="fas fa-box"></i> Products
                    </a></li>
                <li><a href="/admin/orders">
                        <i class="fas fa-shopping-cart"></i> Orders
                    </a></li>
                <li><a href="/admin/users">
                        <i class="fas fa-users"></i> Users
                    </a></li>
                <li><a href="/admin/categories">
                        <i class="fas fa-tags"></i> Category
                    </a></li>
                
                <li><a href="/admin/coupons">
                        <i class="fas fa-ticket-alt"></i> Coupons
                    </a></li>
                <li><a href="/settings">
                        <i class="fas fa-cog"></i> Settings
                    </a></li>
                <li><a href="/admin/logout">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </a></li>
            </ul>
        </aside>
        <main class="main-content">
            <header class="topbar">
                <h1>Add Product</h1>
            </header>
            <section class="add-product-form">
                <form id="productForm" action="/admin/addproducts" method="POST">
                 
                    <div class="form-group">
                        <label for="productName">Product Name</label>
                        <input type="text" id="productName" name="productName">
                        <div class="error-message" id="productNameError" style="display:none; color: red;">Product name
                            is required</div>
                        <% if (error) { %>
                            <div style="color: red; margin-bottom: 15px;">
                                <%= error %>
                            </div>
                            <% } %>
                    </div>
                  
                    <div class="form-group">
                        <label for="category">Category</label>
                        <select id="category" name="category">
                            <% categories.forEach(category=> { %>
                                <option value="<%= category._id %>">
                                    <%= category?.name %>
                                </option>
                                <% }) %>
                        </select>
                        <div class="error-message" id="categoryError" style="display:none; color: red;">Category is
                            required</div>
                    </div>

                   
                    <div class="form-group">
                        <label for="price">Price ($)</label>
                        <input type="number" id="price" name="price">
                        <div class="error-message" id="priceError" style="display:none; color: red;">Price is required
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="offer">Offer (%)</label>
                        <input type="number" id="offer" name="offer" min="0" max="100">
                    </div>

                    <div class="form-group">
                        <label for="brand">Brand</label>
                        <input type="text" id="brand" name="brand">
                        <div class="error-message" id="brandError" style="display:none; color: red;">Brand is required
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <button type="button" id="openVariantModal" class="variant-button">
                            Color & Stock
                        </button>
                        <div id="variantsList" class="variants-summary mt-2"></div>
                        <div class="error-message" id="variants" style="display:none; color: red;">variant is required
                        </div>
                    </div>

                    
                    <div id="variantModal" class="modal" style="display: none">
                        <div class="modal-content">
                            <span class="close-modal">&times;</span>
                            <h2>Add Color & Stock</h2>

                            <div class="variant-form">
                                <div class="form-group">
                                    <label for="colorInput">Color</label>
                                    <select id="colorInput" name="color">
                                        <option value="">Select Color</option>
                                        <option value="Red">Red</option>
                                        <option value="Blue">Blue</option>
                                        <option value="Green">Green</option>
                                        <option value="Black">Black</option>
                                        <option value="White">White</option>
                                        <option value="Yellow">Yellow</option>
                                    </select>
                                    <div class="error-message" id="color12" style="display:none; color: red;">color is
                                        required
                                    </div>
                                    <div class="error-message" id="colorEx" style="display:none; color: red;">Alredy
                                        exist this color
                                    </div>

                                </div>
                                <div class="form-group">
                                    <label for="stockInput">Stock Quantity</label>
                                    <input type="number" id="stockInput" name="stock" min="0">
                                    <div class="error-message" id="stock12" style="display:none; color: red;">color is
                                        required
                                    </div>
                                </div>

                                <button type="button" id="addVariant" class="add-variant-btn">Add Variant</button>
                            </div>

                            <div class="variants-list">
                                <h3>Added Variants</h3>
                                <div id="modalVariantsList"></div>
                            </div>

                            <div class="modal-actions">
                                <button type="button" id="saveVariants" class="save-variants-btn">Save Variants</button>
                            </div>
                        </div>
                    </div>

                  
                    <input type="hidden" id="variantsData" name="variants" value="[{...}]">

                    
                    <div class="form-group">
                        <label for="material">Material</label>
                        <input type="text" id="material" name="material">
                        <div class="error-message" id="materialError" style="display:none; color: red;">Material is
                            required</div>
                    </div>

                    
                    <div class="form-group">
                        <label for="productDescription">Product Description</label>
                        <textarea id="productDescription" name="productDescription" rows="5"></textarea>
                        <div class="error-message" id="productDescriptionError" style="display:none; color: red;">
                            Description is required</div>
                    </div>

                  
                    <div style="margin: 2%;" class="max-w-6xl mx-auto bg-white rounded-xl shadow-lg p-8">
                        <div class="flex items-center justify-between mb-8">
                            <h2 class="text-2xl font-bold text-gray-800">Product Images</h2>
                            <span class="text-sm text-gray-500">Upload up to 4 images</span>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                            <% for (let i=1; i <=4; i++) { %>
                                <div id="imageUploadSection<%= i %>" class="relative group">
                               
                                    <div
                                        class="min-h-[300px] bg-gray-50 border-2 border-dashed border-gray-300 rounded-xl p-6 transition-all duration-300 hover:border-blue-500 hover:bg-gray-100">
                                        <label for="imageUpload<%= i %>" class="block h-full">
                                            <div
                                                class="flex flex-col items-center justify-center h-full space-y-4 cursor-pointer">
                                              
                                                <div
                                                    class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center">
                                                    <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor"
                                                        viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round"
                                                            stroke-width="2"
                                                            d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                                    </svg>
                                                </div>
                                               
                                                <div class="text-center">
                                                    <p class="text-sm font-medium text-gray-700">Image <%= i %>
                                                    </p>
                                                    <p class="mt-1 text-xs text-gray-500">Drop your image here, or click
                                                        to browse</p>
                                                    <p class="mt-2 text-xs text-gray-400">PNG, JPG up to 5MB</p>
                                                  

                                                </div>
                                            </div>
                                        </label>
                                        <div style="height: 200px;"
                                            class="relative w-full h-[300px] overflow-hidden border border-gray-300 rounded-lg">
                                            <img id="cropperImage<%= i %>"
                                                class="absolute inset-0 w-full h-full object-contain" src=""
                                                style="display:none;">
                                        </div>
                                        <input type="file" id="imageUpload<%= i %>" accept="image/*" class="hidden">
                                    </div>


                                    <!-- Image Preview -->
                                    <div class="image-container mt-4">
                                        <img id="cropperImage<%= i %>"
                                            class="w-full rounded-lg shadow-md object-cover max-h-[300px]" src=""
                                            style="display:none;">
                                    </div>

                                    <!-- Cropped Preview -->
                                    <div id="previewContainer<%= i %>" class="mt-4 hidden">
                                        <div class="bg-gray-50 rounded-lg p-4">
                                            <h3 class="text-sm font-medium text-gray-700 mb-3">Preview</h3>
                                            <img id="croppedPreview<%= i %>"
                                                class="w-full rounded-lg shadow-sm object-cover max-h-[200px]">
                                        </div>
                                    </div>

                                  
                                    <div class="flex items-center gap-3 mt-4">
                                        <button id="cropButton<%= i %>" type="button" disabled
                                            class="flex items-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 
                                                       transition-colors disabled:opacity-50 disabled:cursor-not-allowed">

                                            Crop
                                        </button>
                                        <button id="resetButton<%= i %>" type="button" disabled
                                            class="flex items-center px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 
                                                       transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor"
                                                viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                    d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                                            </svg>
                                            Reset
                                        </button>
                                        <button id="deleteButton<%= i %>" type="button" class="flex items-center px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 
                                                       transition-colors hidden">
                                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor"
                                                viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                    d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                            </svg>
                                            Delete
                                        </button>
                                    </div>

                                    
                                    <div id="imageError<%= i %>" class="hidden mt-2">
                                        <p class="text-sm text-red-500 flex items-center">
                                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor"
                                                viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                    d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                            </svg>
                                            Image is required
                                        </p>
                                    </div>
                                </div>
                                <% } %>
                        </div>
                    </div>

                 
                    <input type="hidden" id="image1" name="image1">
                    <input type="hidden" id="image2" name="image2">
                    <input type="hidden" id="image3" name="image3">
                    <input type="hidden" id="image4" name="image4">

                  
                    <div class="form-actions">
                        <button type="submit" class="submit-button">Add Product</button>
                        <button type="button" class="cancel-button" onclick="window.history.back()">Cancel</button>
                    </div>
                </form>


            </section>
        </main>
    </div>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.16/cropper.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
        let croppers = [];
        let croppedImages = {};

        const imageUploads = [
            { upload: document.getElementById('imageUpload1'), image: document.getElementById('cropperImage1'), cropBtn: document.getElementById('cropButton1'), resetBtn: document.getElementById('resetButton1'), deleteBtn: document.getElementById('deleteButton1'), error: document.getElementById('imageError1') },
            { upload: document.getElementById('imageUpload2'), image: document.getElementById('cropperImage2'), cropBtn: document.getElementById('cropButton2'), resetBtn: document.getElementById('resetButton2'), deleteBtn: document.getElementById('deleteButton2'), error: document.getElementById('imageError2') },
            { upload: document.getElementById('imageUpload3'), image: document.getElementById('cropperImage3'), cropBtn: document.getElementById('cropButton3'), resetBtn: document.getElementById('resetButton3'), deleteBtn: document.getElementById('deleteButton3'), error: document.getElementById('imageError3') },
            { upload: document.getElementById('imageUpload4'), image: document.getElementById('cropperImage4'), cropBtn: document.getElementById('cropButton4'), resetBtn: document.getElementById('resetButton4'), deleteBtn: document.getElementById('deleteButton4'), error: document.getElementById('imageError4') },
        ];

        imageUploads.forEach((item, index) => {
            item.upload.addEventListener('change', function (e) {
                const file = e.target.files[0];
                if (!file) {
                    item.error.textContent = "Image is required";
                    item.error.style.display = 'block';
                    return;
                }
                const reader = new FileReader();

                reader.onload = function (event) {
                    item.image.src = event.target.result;
                    item.image.style.display = 'block';

                    if (croppers[index]) {
                        croppers[index].destroy();
                    }

                    croppers[index] = new Cropper(item.image, {
                        viewMode: 1,
                        dragMode: 'move',
                        autoCropArea: 0.8,
                        restore: true,
                        guides: true,
                        center: true,
                        highlight: true,
                        cropBoxMovable: true,
                        cropBoxResizable: true,
                    });

                    item.cropBtn.disabled = false;
                    item.resetBtn.disabled = false;
                    item.error.style.display = 'none';
                };

                reader.readAsDataURL(file);
            });

            item.cropBtn.addEventListener('click', function () {
                const cropper = croppers[index];
                if (!cropper) return;

                const croppedCanvas = cropper.getCroppedCanvas();
                if (!croppedCanvas) {
                    item.error.style.display = 'block';
                    return;
                }

                const base64Image = croppedCanvas.toDataURL();
                croppedImages[`image${index + 1}`] = base64Image;

               
                document.getElementById(`image${index + 1}`).value = base64Image;

                
                const previewContainer = document.getElementById(`previewContainer${index + 1}`);
                const previewImage = document.getElementById(`croppedPreview${index + 1}`);
                previewImage.src = base64Image;
                previewContainer.style.display = 'block';  
            });

            item.resetBtn.addEventListener('click', function () {
                croppers[index].reset();
                item.error.style.display = 'none';

            
                const previewContainer = document.getElementById(`previewContainer${index + 1}`);
                previewContainer.style.display = 'none';
            });

            item.deleteBtn.addEventListener('click', function () {
            
                item.image.style.display = 'none';
                item.deleteBtn.style.display = 'none';


                croppers[index].reset();
                item.error.style.display = 'none';

               
                document.getElementById(`image${index + 1}`).value = '';

              
                const previewContainer = document.getElementById(`previewContainer${index + 1}`);
                previewContainer.style.display = 'none';
            });
        });

     
        const form = document.getElementById('productForm');
        form.addEventListener('submit', function (e) {
            let valid = true;

     
            document.querySelectorAll('.error-message').forEach((el) => {
                el.style.display = 'none';
            });

         
            const fields = [
                { field: 'category', error: 'categoryError' },
                { field: 'brand', error: 'brandError' },
                { field: 'material', error: 'materialError' },
                { field: 'productDescription', error: 'productDescriptionError' },
            ];

            fields.forEach((field) => {
                const input = document.getElementById(field.field);
                if (!input.value.trim()) {
                    document.getElementById(field.error).style.display = 'block';
                    valid = false;
                }
            });
           
            if (!document.getElementById('variant')) {
                document.getElementById('variants').style.display = 'block';
                valid = false
            }
          
            const priceInput = document.getElementById('price');
            const priceValue = parseFloat(priceInput.value);
            const priceError = document.getElementById('priceError');

            if (isNaN(priceValue)) {
                priceError.innerText = "Please enter a valid price";
                priceError.style.display = 'block';
                valid = false;
            } else if (priceValue === 0) {
                priceError.innerText = "Price cannot be zero";
                priceError.style.display = 'block';
                valid = false;
            } else if (priceValue < 0) {
                priceError.innerText = "Price cannot be negative";
                priceError.style.display = 'block';
                valid = false;
            }

            
            const productNameInput = document.getElementById('productName');
            const productNameValue = productNameInput.value.trim();
            const productNameError = document.getElementById('productNameError');

            const specialCharRegex = /[!@#$%^&*()_+={}\[\]:;"'<>,.?/\\|`~]/;
            const onlyZerosRegex = /^0+$/;

            if (productNameValue === "") {
                productNameError.innerText = "Product name is required.";
                productNameError.style.display = 'block';
                valid = false;
            } else if (specialCharRegex.test(productNameValue)) {
                productNameError.innerText = "Product name cannot contain special characters.";
                productNameError.style.display = 'block';
                valid = false;
            } else if (onlyZerosRegex.test(productNameValue)) {
                productNameError.innerText = "Product name cannot be only zeros.";
                productNameError.style.display = 'block';
                valid = false;
            } else {
                productNameError.style.display = 'none'; 
            }


           
            const image1 = document.getElementById('image1').value;
            const image2 = document.getElementById('image2').value;
            const image3 = document.getElementById('image3').value;
            const image4 = document.getElementById('image4').value;

            if (!image1 && !image2 && !image3 && !image4) {
                document.querySelectorAll('[id^="imageError"]').forEach(el => {
                    el.style.display = 'block';
                });
                valid = false;
            }

            if (!valid) {
                e.preventDefault();
            }
        });


        document.addEventListener('DOMContentLoaded', function () {
            const modal = document.getElementById('variantModal');
            const openBtn = document.getElementById('openVariantModal');
            const closeBtn = document.querySelector('.close-modal');
            const addVariantBtn = document.getElementById('addVariant');
            const saveVariantsBtn = document.getElementById('saveVariants');
            const variantsData = [];

            openBtn.onclick = function () {
                modal.style.display = "block";
            }

            closeBtn.onclick = function () {
                modal.style.display = "none";
            }

            window.onclick = function (event) {
                if (event.target == modal) {
                    modal.style.display = "none";
                }
            }

            addVariantBtn.onclick = function () {
                const color = document.getElementById('colorInput').value.trim();
                const stock = document.getElementById('stockInput').value.trim();

                
                document.getElementById('color12').style.display = 'none';
                document.getElementById('stock12').style.display = 'none';
                document.getElementById('colorEx').style.display = 'none';

                let valid = true;
                if (variantsData.some(v => v.color === color)) {
                    document.getElementById('colorEx').style.display = 'block';
                    valid = false;
                }

                if (!color) {
                    document.getElementById('color12').style.display = 'block';
                    valid = false;
                }

                if (stock === '') {
                    document.getElementById('stock12').innerText = 'Stock is required';
                    document.getElementById('stock12').style.display = 'block';
                    valid = false;
                } 
                if (!valid) {
                    return;
                }

                variantsData.push({ color, quantity: parseInt(stock) });
                updateVariantsList();
                document.getElementById('colorInput').value = '';
                document.getElementById('stockInput').value = '';
            };
            saveVariantsBtn.onclick = function () {
                if (variantsData.length === 0) {
                    alert("Please add at least one variant.");
                    return;
                }

                document.getElementById('variantsData').value = JSON.stringify(variantsData);
                updateVariantsSummary();
                modal.style.display = "none";
            };

            function updateVariantsList() {
                const list = document.getElementById('modalVariantsList');
                list.innerHTML = variantsData.map((variant, index) => `
            <div id='variant' class="variant-item">
                Color: ${variant.color}, Stock: ${variant.quantity}
                <button onclick="removeVariant(${index})">Remove</button>
            </div>
        `).join('');
            }

            function updateVariantsSummary() {
                const summary = document.getElementById('variantsList');
                summary.innerHTML = variantsData.map(variant =>
                    `<div>Color: ${variant.color}, Stock: ${variant.quantity}</div>`
                ).join('');
            }

            window.removeVariant = function (index) {
                variantsData.splice(index, 1);
                updateVariantsList();
            }
        });


        document.getElementById('addProductForm').onsubmit = function (event) {
            try {
                const variantsField = document.getElementById('variantsData');
                let variantsData = variantsField.value.trim(); 

                if (!variantsData) {
                    alert("Variants data is missing!");
                    event.preventDefault();
                    return;
                }

                let parsedVariants = JSON.parse(variantsData);

                if (!Array.isArray(parsedVariants)) {
                    alert("Invalid format: Variants must be an array!");
                    event.preventDefault();
                    return;
                }

                for (let variant of parsedVariants) {
                    if (!variant.color || variant.quantity <= 0) {
                        alert("Each variant must have a color and stock > 0!");
                        event.preventDefault();
                        return;
                    }
                }
            } catch (error) {
                alert("Error parsing variants data: " + error.message);
                event.preventDefault();
            }
        };

        document.getElementById("productForm").onsubmit = function (event) {
            try {
                const variantsData = JSON.stringify(variantsArray); 
                document.getElementById("variantsData").value = variantsData; 
            } catch (error) {
                console.error("Error setting variants JSON:", error);
                event.preventDefault(); 
                alert("Invalid variants format. Please check your selections.");
            }
        };

        document.getElementById('productForm').addEventListener('submit', function (event) {
            const variantsData = document.getElementById('variantsData').value.trim();
            const variantsError = document.getElementById('variantsError');

            try {
                const variants = JSON.parse(variantsData);

                if (!Array.isArray(variants) || variants.length === 0) {
                    throw new Error(); 
                }

                variantsError.style.display = "none"; 
            } catch (error) {
                variantsError.style.display = "block"; 
                event.preventDefault(); 
            }
        });

         document.addEventListener('DOMContentLoaded', function() {
    const hamburger = document.getElementById('hamburger');
    const sidebar = document.getElementById('sidebar');
    const overlay = document.getElementById('overlay');
    const closeSidebar = document.getElementById('closeSidebar');

    function toggleSidebar() {
        hamburger.classList.toggle('active');
        sidebar.classList.toggle('active');
        overlay.classList.toggle('active');
        document.body.style.overflow = sidebar.classList.contains('active') ? 'hidden' : '';
    }

    hamburger.addEventListener('click', toggleSidebar);
    closeSidebar.addEventListener('click', toggleSidebar);
    overlay.addEventListener('click', toggleSidebar);

    // Close sidebar on window resize if screen becomes larger
    window.addEventListener('resize', function() {
        if (window.innerWidth > 768 && sidebar.classList.contains('active')) {
            toggleSidebar();
        }
    });

    // Add smooth hover effect for menu items
    const menuItems = document.querySelectorAll('.sidebar-menu li a');
    menuItems.forEach(item => {
        item.addEventListener('mouseenter', function() {
            this.style.transform = 'translateX(5px)';
        });
        item.addEventListener('mouseleave', function() {
            this.style.transform = 'translateX(0)';
        });
    });
});


    </script>
</body>
</html>