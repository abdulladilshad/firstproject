<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Report</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
        rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --sidebar-bg: #ffffff;
            --sidebar-width: 250px;
            --primary-blue: #4285f4;
            --text-gray: #5f6368;
            --hover-bg: #f1f5ff;
            --active-color: #4285f4;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        body {
            background: #f0f2f5;
            min-height: 100vh;
            overflow-x: hidden;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Fixed Sidebar */
        .sidebar {
            position: fixed;
            left: 0;
            top: 0;
            width: var(--sidebar-width);
            height: 100vh;
            background: var(--sidebar-bg);
            color: var(--text-gray);
            z-index: 1000;
            overflow-y: auto;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.05);
        }

        .sidebar-header {
            padding: 20px;
            border-bottom: 1px solid #f1f3f4;
        }

        .sidebar-header h2 {
            color: var(--primary-blue);
            font-size: 24px;
            font-weight: 400;
            margin: 0;
        }

        .close-sidebar {
            display: none;
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            padding: 5px;
        }

        .sidebar-menu {
            list-style: none;
            padding: 15px 0;
        }

        .sidebar-menu li {
            margin: 2px 0;
        }

        .sidebar-menu li a {
            display: flex;
            align-items: center;
            padding: 12px 24px;
            color: var(--text-gray);
            text-decoration: none;
            transition: all 0.3s ease;
            border-radius: 0 25px 25px 0;
            margin-right: 12px;
            font-weight: 400;
        }

        .sidebar-menu li a i {
            width: 24px;
            font-size: 18px;
            margin-right: 12px;
            text-align: center;
            color: var(--text-gray);
        }

        .sidebar-menu li a:hover {
            background: var(--hover-bg);
            color: var(--active-color);
        }

        .sidebar-menu li a:hover i {
            color: var(--active-color);
        }

        .sidebar-menu li a.active {
            background: var(--hover-bg);
            color: var(--active-color);
        }

        .sidebar-menu li a.active i {
            color: var(--active-color);
        }

        /* Logout link specific style */
        .sidebar-menu li form a {
            color: var(--text-gray);
        }

        .sidebar-menu li form a:hover {
            background: var(--hover-bg);
            color: var(--active-color);
        }

        /* Hamburger Menu */
        .hamburger-menu {
            display: none;
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1001;
            background: var(--primary-color);
            border: none;
            padding: 15px;
            border-radius: 10px;
            cursor: pointer;
        }

        .hamburger-menu span {
            display: block;
            width: 25px;
            height: 2px;
            background-color: white;
            margin: 6px 0;
            transition: all 0.3s ease;
        }

        /* Overlay */
        .overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(2px);
            z-index: 999;
        }

        /* Main Content Area */
        .main-content {
            flex: 1;
            margin-left: var(--sidebar-width);
            padding: 20px;
            background: #f8f9fe;
        }

        /* Dashboard Header */
        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .dashboard-header h1 {
            font-size: 24px;
            color: #333;
        }

        .header-actions {
            display: flex;
            gap: 10px;
        }

        .export-btn {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .excel-btn {
            background-color: #1D6F42;
            color: white;
        }

        .excel-btn:hover {
            background-color: #185735;
        }

        .pdf-btn {
            background-color: #DC3545;
            color: white;
        }

        .pdf-btn:hover {
            background-color: #bb2d3b;
        }

        /* Filter Section */
        .filter-section {
            background: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 30px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .period-filters {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .period-btn {
            padding: 8px 20px;
            border: 1px solid #e0e0e0;
            border-radius: 5px;
            background: white;
            color: #666;
            cursor: pointer;
        }

        .period-btn.active {
            background: #4361ee;
            color: white;
            border-color: #4361ee;
        }

        .date-filters {
            display: flex;
            gap: 20px;
            align-items: center;
        }

        .date-input {
            padding: 8px 15px;
            border: 1px solid #e0e0e0;
            border-radius: 5px;
        }

        .apply-filter-btn {
            padding: 8px 20px;
            background: #4361ee;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        /* Stats Cards */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .stat-card h3 {
            color: #666;
            font-size: 16px;
            margin-bottom: 10px;
        }

        .stat-value {
            font-size: 24px;
            font-weight: 600;
            color: #333;
            margin-bottom: 10px;
        }

        .stat-trend {
            font-size: 14px;
        }

        .trend-up {
            color: #22c55e;
        }

        .trend-down {
            color: #ef4444;
        }

        /* Search Bar */
        .search-container {
            position: relative;
            width: 300px;
            margin-left: auto;
        }

        .search-input {
            width: 100%;
            padding: 10px 15px;
            padding-left: 35px;
            border: 1px solid #e0e0e0;
            border-radius: 5px;
        }

        .search-icon {
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            color: #666;
        }

        /* Orders Table */
        .orders-table {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            overflow: hidden;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

        .table th {
            background: #f8f9fa;
            padding: 12px 20px;
            text-align: left;
            color: #666;
            font-weight: 500;
        }

        .table td {
            padding: 12px 20px;
            border-top: 1px solid #e0e0e0;
        }

        .status-badge {
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 12px;
        }

        .status-delivered {
            background: #dcfce7;
            color: #22c55e;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .hamburger-menu {
                display: block;
            }

            .sidebar {
                transform: translateX(-100%);
            }

            .sidebar.active {
                transform: translateX(0);
            }

            .close-sidebar {
                display: block;
            }

            .main-content {
                margin-left: 0;
                width: 100%;
            }

            .overlay.active {
                display: block;
            }

            /* Hamburger Animation */
            .hamburger-menu.active span:nth-child(1) {
                transform: rotate(45deg) translate(6px, 6px);
            }

            .hamburger-menu.active span:nth-child(2) {
                opacity: 0;
            }

            .hamburger-menu.active span:nth-child(3) {
                transform: rotate(-45deg) translate(7px, -7px);
            }
        }

        /* Scrollbar Styling */
        .sidebar::-webkit-scrollbar {
            width: 6px;
        }

        .sidebar::-webkit-scrollbar-track {
            background: transparent;
        }

        .sidebar::-webkit-scrollbar-thumb {
            background: #e0e0e0;
            border-radius: 3px;
        }

        .sidebar::-webkit-scrollbar-thumb:hover {
            background: #d0d0d0;
        }
    </style>
    <!-- Add these script tags before your custom scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.31/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
</head>

<body>
    <button id="hamburger" class="hamburger-menu">
        <span></span>
        <span></span>
        <span></span>
    </button>

    <div class="dashboard-container">
        <div class="overlay" id="overlay"></div>
        <aside class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <h2>Dashboard</h2>
                <button class="close-sidebar" id="closeSidebar">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <ul class="sidebar-menu">
                <li><a href="/admin/dashboard">
                    <i class="fas fa-home"></i> Dashboard
                </a></li>
                <li><a href="/admin/sales" class="active">
                        <i class="fas fa-chart-line"></i> Sales Report
                    </a></li>
                <li><a href="/admin/products">
                        <i class="fas fa-box"></i> Products
                    </a></li>
                <li><a href="/admin/orders">
                        <i class="fas fa-shopping-cart"></i> Orders
                    </a></li>
                <li><a href="/admin/users">
                        <i class="fas fa-users"></i> Users
                    </a></li>
                <li><a href="/admin/categories">
                        <i class="fas fa-tags"></i> Category
                    </a></li>   
                <li><a href="/admin/coupons">
                        <i class="fas fa-ticket-alt"></i> Coupons
                    </a></li>
                <li><a href="/settings">
                        <i class="fas fa-cog"></i> Settings
                    </a></li>
                <li>
                    <form id="logoutForm" action="/admin/logout" method="POST">
                        <a href="#" onclick="document.getElementById('logoutForm').submit();">
                            <i class="fas fa-sign-out-alt"></i> Logout
                        </a>
                    </form>
                </li>
            </ul>
        </aside>

        <main class="main-content">
            <div class="dashboard-header">
                <h1>Dashboard</h1>
                <div class="header-actions">
                    <button type="button" class="export-btn excel-btn" onclick="downloadExcel()">
                        <i class="fas fa-file-excel"></i> Excel
                    </button>
                    <button onclick="generatePDF()" class="export-btn pdf-btn">
                        <i class="fas fa-file-pdf"></i> PDF
                    </button>
                </div>
            </div>

            <!-- Date Filter -->
            <div class="filter-card mb-4">
                <div class="card-body">
                    <h5 class="card-title mb-3"><i class="fas fa-calendar me-2"></i>Report Period</h5>
                    <div class="row g-3">
                        <!-- Period Filter Buttons -->
                        <div class="col-md-12 mb-3">
                            <div class="btn-group w-100" role="group" aria-label="Time period filter">
                                <a href="?period=daily"
                                    class="btn btn-period <%= selectedPeriod === 'daily' ? 'active' : 'btn-outline-primary' %>">
                                    <i class="fas fa-calendar-day me-1"></i>Daily
                                </a>
                                <a href="?period=weekly"
                                    class="btn btn-period <%= selectedPeriod === 'weekly' ? 'active' : 'btn-outline-primary' %>">
                                    <i class="fas fa-calendar-week me-1"></i>Weekly
                                </a>
                                <a href="?period=monthly"
                                    class="btn btn-period <%= selectedPeriod === 'monthly' ? 'active' : 'btn-outline-primary' %>">
                                    <i class="fas fa-calendar-alt me-1"></i>Monthly
                                </a>
                                <a href="?period=yearly"
                                    class="btn btn-period <%= selectedPeriod === 'yearly' ? 'active' : 'btn-outline-primary' %>">
                                    <i class="fas fa-calendar me-1"></i>Yearly
                                </a>
                            </div>
                        </div>

                        <!-- Custom Date Range -->
                        <div class="col-12">
                            <div class="custom-date-card">
                                <div class="card-body">
                                    <h6 class="mb-3"><i class="fas fa-filter me-2"></i>Custom Date Range</h6>
                                    <form class="row g-3" method="GET">
                                        <div class="col-md-4">
                                            <label for="startDate" class="form-label">Start Date</label>
                                            <div class="input-group">
                                                <span class="input-group-text"><i
                                                        class="fas fa-calendar-alt"></i></span>
                                                <input type="date" class="form-control" id="startDate" name="startDate"
                                                    value="<%= startDate %>">
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <label for="endDate" class="form-label">End Date</label>
                                            <div class="input-group">
                                                <span class="input-group-text"><i
                                                        class="fas fa-calendar-alt"></i></span>
                                                <input type="date" class="form-control" id="endDate" name="endDate"
                                                    value="<%= endDate %>">
                                            </div>
                                        </div>
                                        <div class="col-md-4 d-flex align-items-end">
                                            <button type="submit" class="btn btn-primary w-100">
                                                <i class="fas fa-filter me-2"></i>Apply Filter
                                            </button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sales Summary -->
            <div class="row mb-4">
                <div class="col-md-3 mb-3">
                    <div class="stat-card bg-white">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-8">
                                    <h5 class="card-title">Total Sales</h5>
                                    <h3 class="card-text">$<%= typeof totalSales !=='undefined' ? totalSales : '45,690'
                                            %>
                                    </h3>
                                    <p class="text-success mb-0"><i class="fas fa-arrow-up me-1"></i>8.3% growth</p>
                                </div>
                                <div class="col-4 text-end">
                                    <i class="fas fa-dollar-sign icon"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="stat-card bg-white">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-8">
                                    <h5 class="card-title">Total Orders</h5>
                                    <h3 class="card-text">
                                        <%= typeof totalOrders !=='undefined' ? totalOrders : '254' %>
                                    </h3>
                                    <p class="text-success mb-0"><i class="fas fa-arrow-up me-1"></i>5.7% growth</p>
                                </div>
                                <div class="col-4 text-end">
                                    <i class="fas fa-shopping-bag icon"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="stat-card bg-white">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-8">
                                    <h5 class="card-title">Average Order</h5>
                                    <h3 class="card-text">$<%= typeof avgOrderValue !=='undefined' ? avgOrderValue
                                            : '1,879' %>
                                    </h3>
                                    <p class="text-danger mb-0"><i class="fas fa-arrow-down me-1"></i>2.4% decrease</p>
                                </div>
                                <div class="col-4 text-end">
                                    <i class="fas fa-calculator icon"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="stat-card bg-white">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-8">
                                    <h5 class="card-title">Products Sold</h5>
                                    <h3 class="card-text">
                                        <%= typeof productsSold !=='undefined' ? productsSold : '532' %>
                                    </h3>
                                    <p class="text-success mb-0"><i class="fas fa-arrow-up me-1"></i>12.1% growth</p>
                                </div>
                                <div class="col-4 text-end">
                                    <i class="fas fa-box icon"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sales Table -->
            <div class="table-card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="card-title mb-0"><i class="fas fa-list me-2"></i>Recent Transactions</h5>
                        <div class="input-group w-25">
                            <input type="text" 
                                class="form-control" 
                                id="searchInput"
                                placeholder="Search orders..." 
                                autocomplete="off"
                            >
                            <button class="btn btn-outline-secondary" type="button" id="searchButton">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table" id="ordersTable">
                            <thead>
                                <tr>
                                    <th>#OrderID</th>
                                    <th>Date</th>
                                    <th>Customer Name</th>
                                    <th>Products</th>
                                    <th>Amount</th>
                                </tr>
                            </thead>
                            <tbody id="ordersTableBody">
                                <% if (typeof orders !=='undefined' && orders.length> 0) { %>
                                    <% orders.forEach(order=> { %>
                                        <tr>
                                            <td><span class="fw-medium">#<%= order.orderId %></span></td>
                                            <td><%= new Date(order.date).toLocaleDateString() %></td>
                                            <td><%= order.customerName %></td>
                                            <td><span class="badge bg-info text-dark"><%= order.productCount %> items</span></td>
                                            <td><span class="fw-medium">$<%= order.totalAmount %></span></td>
                                        </tr>
                                    <% }); %>
                                <% } else { %>
                                    <tr id="noOrdersRow">
                                        <td colspan="5" class="text-center py-4">
                                            <div class="d-flex flex-column align-items-center">
                                                <i class="fas fa-box-open fa-3x text-secondary mb-3"></i>
                                                <h5 class="text-secondary">No orders found</h5>
                                                <p class="text-muted">Try adjusting your search criteria</p>
                                            </div>
                                        </td>
                                    </tr>
                                <% } %>
                            </tbody>
                        </table>
                    </div>

                    <!-- Pagination -->
                    <div class="d-flex justify-content-between align-items-center mt-4">
                        <div>
                            <span class="text-muted">
                                Showing <%= ((currentPage - 1) * limit) + 1 %> to <%= Math.min(currentPage * limit, totalOrders) %> of <%= totalOrders %> entries
                            </span>
                        </div>
                        <nav aria-label="Page navigation">
                            <ul class="pagination mb-0">
                                <!-- Previous Page -->
                                <li class="page-item <%= !hasPrevPage ? 'disabled' : '' %>">
                                    <a class="page-link" href="?page=<%= prevPage %>&period=<%= selectedPeriod %>&startDate=<%= startDate %>&endDate=<%= endDate %>&search=<%= searchQuery %>" aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>

                                <!-- First Page -->
                                <% if(currentPage > 2) { %>
                                    <li class="page-item">
                                        <a class="page-link" href="?page=1&period=<%= selectedPeriod %>&startDate=<%= startDate %>&endDate=<%= endDate %>&search=<%= searchQuery %>">1</a>
                                    </li>
                                    <% if(currentPage > 3) { %>
                                        <li class="page-item disabled"><span class="page-link">...</span></li>
                                    <% } %>
                                <% } %>

                                <!-- Page Numbers -->
                                <% for(let i = Math.max(1, currentPage - 1); i <= Math.min(totalPages, currentPage + 1); i++) { %>
                                    <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                                        <a class="page-link" href="?page=<%= i %>&period=<%= selectedPeriod %>&startDate=<%= startDate %>&endDate=<%= endDate %>&search=<%= searchQuery %>"><%= i %></a>
                                    </li>
                                <% } %>

                                <!-- Last Page -->
                                <% if(currentPage < totalPages - 1) { %>
                                    <% if(currentPage < totalPages - 2) { %>
                                        <li class="page-item disabled"><span class="page-link">...</span></li>
                                    <% } %>
                                    <li class="page-item">
                                        <a class="page-link" href="?page=<%= totalPages %>&period=<%= selectedPeriod %>&startDate=<%= startDate %>&endDate=<%= endDate %>&search=<%= searchQuery %>"><%= totalPages %></a>
                                    </li>
                                <% } %>

                                <!-- Next Page -->
                                <li class="page-item <%= !hasNextPage ? 'disabled' : '' %>">
                                    <a class="page-link" href="?page=<%= nextPage %>&period=<%= selectedPeriod %>&startDate=<%= startDate %>&endDate=<%= endDate %>&search=<%= searchQuery %>" aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Add this at the start of your script
        if (typeof XLSX === 'undefined') {
            console.error('XLSX library not loaded!');
        } else {
            console.log('XLSX library loaded successfully');
        }

        // Sidebar Toggle Functionality
        document.getElementById('hamburger').addEventListener('click', function () {
            this.classList.toggle('active');
            document.getElementById('sidebar').classList.toggle('active');
            document.getElementById('overlay').classList.toggle('active');
        });

        document.getElementById('closeSidebar').addEventListener('click', function () {
            document.getElementById('hamburger').classList.remove('active');
            document.getElementById('sidebar').classList.remove('active');
            document.getElementById('overlay').classList.remove('active');
        });

        document.getElementById('overlay').addEventListener('click', function () {
            document.getElementById('hamburger').classList.remove('active');
            document.getElementById('sidebar').classList.remove('active');
            this.classList.remove('active');
        });

        // Global flag to prevent multiple downloads
        let isGeneratingReport = false;

        // Add this function to generate a PDF of the sales report
        function generatePDF() {
            // Prevent multiple downloads
            if (isGeneratingReport) {
                console.log('Already generating a report, please wait...');
                return;
            }
            
            isGeneratingReport = true;
            
            try {
                console.log('Generating PDF report...');
                
                // Initialize jsPDF
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();
                
                // Set document properties
                doc.setProperties({
                    title: 'Sales Report',
                    subject: 'Sales Report',
                    author: 'Admin Dashboard',
                    creator: 'Your Store'
                });
                
                // Add title
                doc.setFontSize(18);
                doc.setTextColor(40, 40, 40);
                doc.text('Sales Report', 14, 22);
                
                // Add generation date
                doc.setFontSize(10);
                doc.setTextColor(100, 100, 100);
                const generationDate = new Date().toLocaleString();
                doc.text(`Generated: ${generationDate}`, 14, 30);
                
                // Add horizontal line
                doc.setDrawColor(200, 200, 200);
                doc.line(14, 35, 196, 35);
                
                // Create summary metrics table
                let yPos = 45;
                
                // Get metrics from the page using a more reliable method
                const metrics = [
                    { name: 'Total Sales', value: '$43000' },
                    { name: 'Total Orders', value: '62' },
                    { name: 'Average Order', value: '$693.55' },
                    { name: 'Products Sold', value: '1' }
                ];
                
                // Try to get actual values from the DOM
                try {
                    const statCards = document.querySelectorAll('.stat-card');
                    if (statCards && statCards.length >= 4) {
                        const totalSalesEl = statCards[0].querySelector('.card-text');
                        if (totalSalesEl) {
                            let value = totalSalesEl.textContent.trim();
                            value = value.replace(/[^\d.,]/g, '');
                            metrics[0].value = '$' + value;
                        }
                        
                        const totalOrdersEl = statCards[1].querySelector('.card-text');
                        if (totalOrdersEl) {
                            metrics[1].value = totalOrdersEl.textContent.trim();
                        }
                        
                        const avgOrderEl = statCards[2].querySelector('.card-text');
                        if (avgOrderEl) {
                            let value = avgOrderEl.textContent.trim();
                            value = value.replace(/[^\d.,]/g, '');
                            metrics[2].value = '$' + value;
                        }
                        
                        const productsSoldEl = statCards[3].querySelector('.card-text');
                        if (productsSoldEl) {
                            metrics[3].value = productsSoldEl.textContent.trim();
                        }
                    }
                } catch (error) {
                    console.warn('Error getting metrics from DOM:', error);
                    // Continue with hardcoded values
                }
                
                console.log('Metrics for PDF:', metrics);
                
                // Create summary table manually
                const metricHeaders = [['Metric', 'Value']];
                const metricData = metrics.map(metric => [metric.name, metric.value]);
                
                doc.autoTable({
                    startY: yPos,
                    head: metricHeaders,
                    body: metricData,
                    theme: 'grid',
                    headStyles: {
                        fillColor: [66, 133, 244],
                        textColor: 255,
                        fontStyle: 'bold'
                    },
                    styles: {
                        fontSize: 10,
                        cellPadding: 5
                    },
                    columnStyles: {
                        0: { cellWidth: 80 },
                        1: { cellWidth: 80 }
                    }
                });
                
                // Update yPos to after the metrics table
                yPos = doc.lastAutoTable.finalY + 20;
                
                // Add sales transactions table title
                doc.setFontSize(14);
                doc.setTextColor(40, 40, 40);
                doc.text('Recent Transactions', 14, yPos);
                yPos += 10;
                
                // Create a hardcoded transactions table if we can't get it from the DOM
                const transactionHeaders = [['Order ID', 'Date', 'Customer', 'Products', 'Amount']];
                
                // Try to get actual transactions from the DOM
                let transactionRows = [];
                try {
                    const table = document.querySelector('.table');
                    console.log('Found table:', table);
                    
                    if (table) {
                        const tableRows = table.querySelectorAll('tbody tr');
                        console.log('Found table rows:', tableRows.length);
                        
                        if (tableRows && tableRows.length > 0) {
                            tableRows.forEach(row => {
                                const cells = row.querySelectorAll('td');
                                if (cells && cells.length > 0) {
                                    const rowData = [];
                                    cells.forEach(cell => {
                                        rowData.push(cell.textContent.trim());
                                    });
                                    transactionRows.push(rowData);
                                }
                            });
                        }
                    }
                } catch (error) {
                    console.warn('Error getting transactions from DOM:', error);
                }
                
                console.log('Transaction rows:', transactionRows);
                
                // If we couldn't get transactions from the DOM, use sample data
                if (transactionRows.length === 0) {
                    transactionRows = [
                        ['#ORD-001', '2023-03-01', 'John Doe', '2 items', '$120.00'],
                        ['#ORD-002', '2023-03-02', 'Jane Smith', '1 item', '$85.50'],
                        ['#ORD-003', '2023-03-03', 'Bob Johnson', '3 items', '$210.75']
                    ];
                }
                
                // Generate transactions table in PDF
                doc.autoTable({
                    startY: yPos,
                    head: transactionHeaders,
                    body: transactionRows,
                    theme: 'grid',
                    headStyles: {
                        fillColor: [66, 133, 244],
                        textColor: 255,
                        fontStyle: 'bold'
                    },
                    styles: {
                        fontSize: 9,
                        cellPadding: 3
                    }
                });
                
                // Add footer
                const pageCount = doc.internal.getNumberOfPages();
                for (let i = 1; i <= pageCount; i++) {
                    doc.setPage(i);
                    doc.setFontSize(8);
                    doc.setTextColor(150, 150, 150);
                    doc.text(`Generated on ${generationDate} - Page ${i} of ${pageCount}`, 14, doc.internal.pageSize.height - 10);
                }
                
                // Save the PDF
                doc.save('sales-report.pdf');
                console.log('PDF generated successfully');
                
            } catch (error) {
                console.error('Error generating PDF:', error);
                alert('Error generating PDF. Check console for details.');
            } finally {
                // Reset the flag after a short delay
                setTimeout(() => {
                    isGeneratingReport = false;
                }, 1000);
            }
        }

        // First, define our global variables
        window.isGeneratingReport = false;

        // Define the function globally
        function downloadExcel() {
            console.log('Download Excel function called');
            
            try {
                // Get the table element
                const table = document.querySelector('.table');
                if (!table) {
                    console.error('Table not found');
                    return;
                }

                // Get all rows
                const rows = Array.from(table.querySelectorAll('tr'));
                const data = [];

                // Process each row
                rows.forEach(row => {
                    const cells = Array.from(row.querySelectorAll('td'));
                    if (cells.length > 0) {
                        const rowData = cells.map(cell => cell.textContent.trim());
                        data.push(rowData);
                    }
                });

                // Add headers
                data.unshift(['Order ID', 'Date', 'Customer Name', 'Products', 'Amount']);

                // Create workbook and worksheet
                const wb = XLSX.utils.book_new();
                const ws = XLSX.utils.aoa_to_sheet(data);

                // Add worksheet to workbook
                XLSX.utils.book_append_sheet(wb, ws, "Sales Data");

                // Save file
                XLSX.writeFile(wb, "sales-report.xlsx");
                
            } catch (error) {
                console.error('Error:', error);
                alert('Error generating Excel file');
            }
        }

        // Update your Excel button HTML to use this function directly
    </script>
    <script>
        // Debounce function to limit API calls
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Function to perform the search
        async function performSearch(searchTerm) {
            const searchInput = document.getElementById('searchInput');
            const searchButton = document.getElementById('searchButton');
            const tbody = document.getElementById('ordersTableBody');
            
            try {
                // Show loading state
                searchInput.disabled = true;
                searchButton.disabled = true;
                searchButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                
                // Show loading in table
                tbody.innerHTML = `
                    <tr>
                        <td colspan="5" class="text-center py-4">
                            <div class="d-flex flex-column align-items-center">
                                <i class="fas fa-spinner fa-spin fa-3x text-primary mb-3"></i>
                                <h5 class="text-primary">Searching...</h5>
                                <p class="text-muted">Please wait while we fetch the results</p>
                            </div>
                        </td>
                    </tr>
                `;

                // Get current filter values
                const urlParams = new URLSearchParams(window.location.search);
                const period = urlParams.get('period') || 'daily';
                const startDate = document.getElementById('startDate')?.value || '';
                const endDate = document.getElementById('endDate')?.value || '';

                // Make the API call
                const response = await fetch(`/admin/search-orders?search=${encodeURIComponent(searchTerm)}&period=${period}&startDate=${startDate}&endDate=${endDate}`);
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.message || 'Failed to fetch search results');
                }

                // Update table with results
                if (!data.orders || data.orders.length === 0) {
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="5" class="text-center py-4">
                                <div class="d-flex flex-column align-items-center">
                                    <i class="fas fa-search fa-3x text-secondary mb-3"></i>
                                    <h5 class="text-secondary">No orders found</h5>
                                    <p class="text-muted">Try adjusting your search criteria</p>
                                </div>
                            </td>
                        </tr>
                    `;
                } else {
                    tbody.innerHTML = data.orders.map(order => `
                        <tr>
                            <td><span class="fw-medium">#${order.orderId}</span></td>
                            <td>${new Date(order.date).toLocaleDateString()}</td>
                            <td>${order.customerName}</td>
                            <td><span class="badge bg-info text-dark">${order.productCount} items</span></td>
                            <td><span class="fw-medium">$${order.totalAmount.toFixed(2)}</span></td>
                        </tr>
                    `).join('');
                }

                // Update stats if available
                if (data.stats) {
                    try {
                        // Get all stat cards
                        const statCards = document.querySelectorAll('.stat-card');
                        
                        // Update Total Sales
                        const totalSalesElement = statCards[0]?.querySelector('.card-text');
                        if (totalSalesElement) {
                            totalSalesElement.textContent = `$${Number(data.stats.totalSales).toFixed(2)}`;
                        }
                        
                        // Update Total Orders
                        const totalOrdersElement = statCards[1]?.querySelector('.card-text');
                        if (totalOrdersElement) {
                            totalOrdersElement.textContent = data.stats.totalOrders;
                        }
                        
                        // Update Average Order Value
                        const avgOrderElement = statCards[2]?.querySelector('.card-text');
                        if (avgOrderElement) {
                            avgOrderElement.textContent = `$${Number(data.stats.avgOrderValue).toFixed(2)}`;
                        }
                        
                        // Update Products Sold
                        const productsSoldElement = statCards[3]?.querySelector('.card-text');
                        if (productsSoldElement) {
                            productsSoldElement.textContent = data.stats.productsSold;
                        }
                    } catch (statsError) {
                        console.error('Error updating statistics:', statsError);
                    }
                }

            } catch (error) {
                console.error('Search error:', error);
                tbody.innerHTML = `
                    <tr>
                        <td colspan="5" class="text-center py-4">
                            <div class="d-flex flex-column align-items-center">
                                <i class="fas fa-exclamation-circle fa-3x text-danger mb-3"></i>
                                <h5 class="text-danger">Error performing search</h5>
                                <p class="text-muted">${error.message || 'Please try again later'}</p>
                            </div>
                        </td>
                    </tr>
                `;
            } finally {
                // Reset input and button state
                searchInput.disabled = false;
                searchButton.disabled = false;
                searchButton.innerHTML = '<i class="fas fa-search"></i>';
            }
        }

        // Set up search input handler with debounce
        const searchInput = document.getElementById('searchInput');
        const debouncedSearch = debounce((searchTerm) => {
            if (searchTerm.length >= 1 || searchTerm === '') {
                performSearch(searchTerm);
            }
        }, 300);

        searchInput.addEventListener('input', (e) => {
            const searchTerm = e.target.value.trim();
            debouncedSearch(searchTerm);
        });

        // Handle search button click
        document.getElementById('searchButton').addEventListener('click', () => {
            const searchTerm = searchInput.value.trim();
            performSearch(searchTerm);
        });

        // Handle form submission
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                const searchTerm = searchInput.value.trim();
                performSearch(searchTerm);
            }
        });
    </script>
</body>

</html>