<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/styles/checkout.css">
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        .available-coupons-section {
            margin-top: 20px;
            padding: 20px;
            border-top: 1px solid #e0e0e0;
            background: #fff;
        }

        .available-coupons-section h3 {
            font-size: 18px;
            margin-bottom: 20px;
            color: #2c2c2c;
            font-weight: 600;
            position: relative;
        }

        .available-coupons-section h3:after {
            content: '';
            position: absolute;
            bottom: -8px;
            left: 0;
            width: 40px;
            height: 3px;
            background: #1976d2;
            border-radius: 2px;
        }

        .coupon-list {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .coupon-item {
            border: 2px solid #e0e0e0;
            border-radius: 12px;
            overflow: hidden;
            transition: all 0.3s ease;
            position: relative;
        }

        .coupon-item:hover {
            border-color: #1976d2;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }

        .coupon-item::before {
            content: '';
            position: absolute;
            left: -8px;
            top: 50%;
            width: 16px;
            height: 16px;
            background: #fff;
            border: 2px solid #e0e0e0;
            border-radius: 50%;
            transform: translateY(-50%);
            z-index: 1;
        }

        .coupon-item::after {
            content: '';
            position: absolute;
            right: -8px;
            top: 50%;
            width: 16px;
            height: 16px;
            background: #fff;
            border: 2px solid #e0e0e0;
            border-radius: 50%;
            transform: translateY(-50%);
            z-index: 1;
        }

        .coupon-radio {
            display: flex;
            align-items: center;
            padding: 16px 25px;
            cursor: pointer;
            transition: background-color 0.2s;
            position: relative;
            background: linear-gradient(to right, #ffffff, #f8f9fa);
        }

        .coupon-radio:hover {
            background: linear-gradient(to right, #f8f9fa, #f1f3f4);
        }

        .coupon-radio input[type="radio"] {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            width: 24px;
            height: 24px;
            border: 2px solid #e0e0e0;
            border-radius: 50%;
            margin-right: 20px;
            position: relative;
            cursor: pointer;
            outline: none;
            transition: all 0.2s ease;
        }

        .coupon-radio input[type="radio"]:before {
            content: '';
            position: absolute;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background-color: #1976d2;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0);
            transition: transform 0.2s ease;
        }

        .coupon-radio input[type="radio"]:checked {
            border-color: #1976d2;
        }

        .coupon-radio input[type="radio"]:checked:before {
            transform: translate(-50%, -50%) scale(1);
        }

        .coupon-radio input[type="radio"]:hover {
            border-color: #1976d2;
        }

        .coupon-radio input[type="radio"]:focus {
            box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.2);
        }

        .coupon-radio input[type="radio"]:active {
            transform: scale(0.9);
        }

        .coupon-details {
            flex: 1;
            position: relative;
        }

        .coupon-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
            padding-bottom: 8px;
            border-bottom: 1px dashed #e0e0e0;
        }

        .coupon-discount {
            font-weight: 700;
            color: #d32f2f;
            font-size: 18px;
            background: #fff0f0;
            padding: 4px 12px;
            border-radius: 20px;
            display: inline-block;
        }

        .coupon-code {
            color: #1976d2;
            font-weight: 600;
            font-size: 16px;
            padding: 4px 12px;
            background: #e3f2fd;
            border-radius: 4px;
            letter-spacing: 1px;
        }

        .coupon-terms {
            font-size: 14px;
            color: #555;
            display: grid;
            gap: 6px;
        }

        .coupon-terms p {
            margin: 0;
            display: flex;
            align-items: center;
        }

        .coupon-terms p:before {
            content: '•';
            margin-right: 8px;
            color: #1976d2;
        }

        .expiry {
            color: #666;
            font-size: 13px;
            font-style: italic;
            margin-top: 8px !important;
            padding-top: 8px;
            border-top: 1px dashed #e0e0e0;
        }

        .expiry:before {
            content: '⏰' !important;
            margin-right: 8px;
        }

        .coupon-message {
            margin-top: 15px;
            padding: 12px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            text-align: center;
            transition: all 0.3s ease;
        }

        .coupon-message.success {
            background-color: #e8f5e9;
            color: #2e7d32;
            border-left: 4px solid #2e7d32;
        }

        .coupon-message.error {
            background-color: #ffebee;
            color: #c62828;
            border-left: 4px solid #c62828;
        }

        /* Animation for when coupon is selected */
        .coupon-radio input[type="radio"]:checked+.coupon-details {
            animation: pulse 0.3s ease-in-out;
        }

        @keyframes pulse {
            0% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.02);
            }

            100% {
                transform: scale(1);
            }
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .coupon-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 8px;
            }

            .coupon-radio {
                padding: 12px 15px;
            }

            .coupon-discount {
                font-size: 16px;
            }

            .coupon-code {
                font-size: 14px;
            }
        }

        .price-row.coupon-discount {
            color: #1976d2;
            font-weight: 500;
        }

        .applied-coupon-code {
            font-size: 0.9em;
            color: #666;
        }

        /* Add these styles to your existing stylesheet */
        .modal-header.bg-danger {
            background-color: #dc3545;
        }
        
        .modal-header .btn-close {
            color: white;
        }
        
        #paymentFailedModal .fas.fa-exclamation-triangle {
            color: #dc3545;
        }
        
        #paymentFailedModal .modal-footer {
            justify-content: space-between;
        }
        
        #paymentFailedModal .btn {
            padding: 8px 20px;
            border-radius: 5px;
        }

        /* Add these styles for form validation */
        .form-group {
            position: relative;
            margin-bottom: 20px;
        }
        
        .form-group input:focus {
            border-color: #4A90E2;
            box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.2);
        }
        
        .form-group input.is-invalid {
            border-color: #dc3545;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none' stroke='%23dc3545' viewBox='0 0 12 12'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }
        
        .error-message {
            color: #dc3545;
            font-size: 12px;
            margin-top: 5px;
            display: block;
            animation: fadeIn 0.3s;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .cod-limit-message {
            font-size: 12px;
            color: #dc3545;
            font-style: italic;
            margin-left: 5px;
        }
        
        input[type="radio"]:disabled + label {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        .no-coupons-message {
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 8px;
            text-align: center;
            color: #6c757d;
            border: 1px dashed #dee2e6;
        }
        
        .no-coupons-message p {
            margin: 0;
            font-size: 14px;
        }

        /* Base responsive styles */
        * {
            box-sizing: border-box;
        }

        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
            font-size: 16px;
            line-height: 1.5;
        }

        /* Main container responsive styling */
        .checkout-container {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Responsive checkout layout */
        .checkout-content {
            display: flex;
            flex-direction: row;
            gap: 20px;
            width: 100%;
        }

        .checkout-left {
            flex: 2;
        }

        .checkout-right {
            flex: 1;
        }

        /* Order items responsive styling */
        .order-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border-bottom: 1px solid #e0e0e0;
        }

        .item-details {
            display: flex;
            align-items: center;
            flex: 1;
        }

        .item-image img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 8px;
        }

        .item-info {
            margin-left: 15px;
        }

        /* Form inputs responsive */
        input, select, textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }

        /* Button styling */
        .btn, button[type="submit"], button.btn {
            display: inline-block;
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            background-color: #1976d2;
            color: white;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .btn:hover, button[type="submit"]:hover, button.btn:hover {
            background-color: #1565c0;
        }

        /* Modal responsiveness */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            overflow-y: auto;
            padding: 20px;
        }

        .modal-content {
            background-color: white;
            border-radius: 10px;
            max-width: 90%;
            width: 500px;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            margin: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            border-bottom: 1px solid #e0e0e0;
        }

        .modal-body {
            padding: 20px;
        }

        .header-title {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .header-title i {
            color: #1976d2;
            font-size: 1.2rem;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.2rem;
            cursor: pointer;
            color: #777;
            transition: color 0.3s;
        }

        .close-btn:hover {
            color: #d32f2f;
        }

        /* Address cards */
        .address-card {
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            transition: all 0.3s ease;
            display: flex;
            flex-direction: row;
            gap: 15px;
        }

        .address-card.selected {
            border-color: #1976d2;
            box-shadow: 0 2px 8px rgba(25, 118, 210, 0.2);
        }

        .address-details {
            display: flex;
            gap: 15px;
            align-items: flex-start;
        }

        .address-icon {
            color: #1976d2;
            font-size: 20px;
            margin-top: 5px;
        }

        .address-text {
            flex: 1;
        }

        .address-text p {
            margin: 0 0 5px 0;
            line-height: 1.4;
        }

        .address-card-select {
            cursor: pointer;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 12px;
            transition: all 0.3s ease;
        }

        .address-card-select:hover {
            border-color: #1976d2;
            background-color: #f5f9ff;
            transform: translateY(-2px);
        }

        .address-card-select.selected {
            border-color: #1976d2;
            background-color: #ebf5ff;
        }

        .card-content {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
        }

        .address-type {
            width: 30px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .address-card-select .address-details {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 5px;
            padding: 0 10px;
        }

        .address-card-select h4 {
            margin: 0 0 5px 0;
            font-size: 16px;
            font-weight: 600;
            color: #333;
        }

        .address-line {
            margin: 0;
            font-size: 14px;
            color: #555;
        }

        .phone-line {
            margin: 5px 0 0 0;
            font-size: 14px;
            color: #555;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .select-indicator {
            display: flex;
            align-items: center;
            gap: 8px;
            color: #1976d2;
            font-weight: 500;
            font-size: 14px;
        }

        .radio-circle {
            width: 18px;
            height: 18px;
            border: 2px solid #1976d2;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
        }

        .address-card-select.selected .radio-circle:after {
            content: '';
            width: 10px;
            height: 10px;
            background-color: #1976d2;
            border-radius: 50%;
            position: absolute;
        }

        .add-address-card {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            background-color: #f9f9f9;
            border: 1px dashed #c0c0c0;
            border-radius: 8px;
            padding: 15px;
            margin-top: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .add-address-card:hover {
            background-color: #f0f7ff;
            border-color: #1976d2;
        }

        .add-icon {
            width: 30px;
            height: 30px;
            background-color: #e3f2fd;
            color: #1976d2;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 16px;
        }

        /* Media queries for responsive layout */
        @media (max-width: 991px) {
            .checkout-content {
                flex-direction: column;
            }
            
            .checkout-left, .checkout-right {
                width: 100%;
            }
        }

        @media (max-width: 768px) {
            .order-item {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .item-total {
                margin-top: 10px;
                align-self: flex-end;
            }
            
            .modal-content {
                width: 95%;
            }
            
            .form-grid {
                display: block !important;
            }
            
            .form-grid > div {
                width: 100% !important;
                margin-bottom: 15px;
            }

            .btn-proceed {
                width: 100%;
            }
        }

        @media (max-width: 576px) {
            .item-details {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .item-image img {
                width: 60px;
                height: 60px;
                margin-bottom: 10px;
            }
            
            .item-info {
                margin-left: 0;
            }
            
            .address-card-select .card-content {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .payment-options {
                flex-direction: column;
            }
            
            .payment-option {
                width: 100%;
                margin-bottom: 10px;
            }
            
            h2, h3 {
                font-size: 1.3rem;
            }
            
            .coupon-discount, .coupon-code {
                font-size: 14px;
                padding: 3px 8px;
            }
        }

        /* Additional helper classes */
        .text-center {
            text-align: center;
        }
        
        .mt-2 {
            margin-top: 10px;
        }
        
        .mb-2 {
            margin-bottom: 10px;
        }
        
        /* Enhance address modal */
        .address-search {
            position: relative;
            margin-bottom: 15px;
        }
        
        .address-search input {
            padding-left: 35px;
        }
        
        .address-search i {
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            color: #777;
        }
        
        /* Payment section styling */
        .payment-section {
            background-color: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        
        .payment-options {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .payment-option {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 12px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            transition: all 0.3s;
        }
        
        .payment-option:hover {
            border-color: #1976d2;
            background-color: #f5f9ff;
        }
        
        /* Order summary styling */
        .order-summary {
            background-color: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        
        .price-details {
            margin-bottom: 20px;
        }
        
        .price-row {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid #f0f0f0;
        }
        
        .price-row.total {
            font-weight: bold;
            font-size: 1.1em;
            border-top: 2px solid #e0e0e0;
            margin-top: 10px;
            padding-top: 15px;
        }
        
        .btn-proceed {
            width: 100%;
            padding: 15px;
            font-size: 1.1em;
            background-color: #4caf50;
            border: none;
            border-radius: 5px;
            color: white;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .btn-proceed:hover {
            background-color: #43a047;
        }

        .wallet-status {
            margin-top: 10px;
            padding: 10px;
            border-radius: 5px;
            font-size: 14px;
        }

        .wallet-status.success {
            background-color: #e8f5e9;
            color: #2e7d32;
            border-left: 4px solid #2e7d32;
        }

        .wallet-status.error {
            background-color: #ffebee;
            color: #c62828;
            border-left: 4px solid #c62828;
        }
    </style>
</head>

<body>
    <div class="checkout-container">

        
        <div class="checkout-content">
         
            <div class="checkout-left">
              
                <section class="address-section">
                    <h2>Shipping Address</h2>
                    <button class="btn-add-address ripple" onclick="showAddressForm()">
                        <div class="btn-content">
                            <i class="fas fa-plus"></i>
                            <span>Add New Address</span>
                        </div>
                    </button>


                 
                    <div class="current-address">
                        <% if (selectedAddress) { %>

                            <div class="address-card selected">
                                <div class="address-details">
                                    <div class="address-icon">
                                        <i class="fas fa-map-marker-alt"></i>
                                    </div>
                                    <div class="address-text">
                                        <p class="name">
                                            <%= selectedAddress.fullName %>
                                        </p>
                                        <p class="street">
                                            <%= selectedAddress.street %>
                                        </p>
                                        <p class="location">
                                            <%= selectedAddress.city %>, <%= selectedAddress.state %>
                                                    <%= selectedAddress.zipCode %>
                                        </p>
                                        <p class="phone"><i class="fas fa-phone"></i>
                                            <%= selectedAddress.phone %>
                                        </p>
                                    </div>
                                </div>
                                <button class="btn  btn-primary" onclick="openAddressModal()">
                                    <i class="fas fa-map-marker-alt"></i> Change Delivery Location
                                </button>
                            </div>
                            <% } else { %>
                                <div class="no-address">
                                    <i class="fas fa-home"></i>
                                    <p>No address selected</p>
                                </div>
                                <% } %>
                    </div>

                    <div id="addressModal" class="modal">
                        <div class="modal-content">
                            <div class="modal-header">
                                <div class="header-title">
                                    <i class="fas fa-map-marked-alt"></i>
                                    <h3>Select Delivery Address</h3>
                                </div>
                                <button class="close-btn" onclick="closeAddressModal()">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                            <div class="modal-body">
                                <div class="address-search">
                                    <i class="fas fa-search"></i>
                                    <input type="text" placeholder="Search saved addresses..." id="addressSearch">
                                </div>
                                <div class="address-list">
                                    <% if (addresses && addresses.length> 0) { %>
                                        <% addresses.forEach(address=> { %>
                                            <div class="address-card-select"
                                                onclick="selectAddress('<%= address._id %>')">
                                                <div class="card-content">
                                                    <div class="address-type">

                                                    </div>
                                                    <div class="address-details">
                                                        <h4>
                                                            <%= address.fullName %>
                                                        </h4>
                                                        <p class="address-line">
                                                            <%= address.street %>
                                                        </p>
                                                        <p class="address-line">
                                                            <%= address.city %>, <%= address.state %>
                                                                    <%= address.zipCode %>
                                                        </p>
                                                        <p class="phone-line"><i class="fas fa-phone"></i>
                                                            <%= address.phone %>
                                                        </p>
                                                    </div>
                                                    <div class="select-indicator">
                                                        <div class="radio-circle"></div>
                                                        <span>Deliver Here</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <% }) %>
                                                <% } %>
                                                    <button class="add-address-card" onclick="showAddressForm()">
                                                        <div class="add-icon">
                                                            <i class="fas fa-plus"></i>
                                                        </div>
                                                        <span>Add New Address</span>
                                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                   
                    <div id="addressFormModal" class="modal">
                        <div class="modal-content">
                            <div class="modal-header">
                                <div class="header-title">
                                    <i class="fas fa-plus-circle"></i>
                                    <h3>Add New Address</h3>
                                </div>
                                <button class="close-btn" onclick="hideAddressForm()">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                            <div class="modal-body">
                                <form id="newAddressForm" class="address-form">
                                    <div class="form-grid">
                                        <div class="form-group">
                                            <label for="fullName">
                                                <i class="fas fa-user"></i>
                                                Full Name
                                            </label>
                                            <input type="text" id="fullName" name="fullName" required>
                                        </div>
                                        <div class="form-group">
                                            <label for="phone">
                                                <i class="fas fa-phone"></i>
                                                Phone Number
                                            </label>
                                            <input type="tel" id="phone" name="phone" required>
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label for="street">
                                            <i class="fas fa-map-marker-alt"></i>
                                            Street Address
                                        </label>
                                        <input type="text" id="street" name="street" required>
                                    </div>

                                    <div class="form-grid three-columns">
                                        <div class="form-group">
                                            <label for="city">
                                                <i class="fas fa-city"></i>
                                                City
                                            </label>
                                            <input type="text" id="city" name="city" required>
                                        </div>
                                        <div class="form-group">
                                            <label for="state">
                                                <i class="fas fa-map"></i>
                                                State
                                            </label>
                                            <input type="text" id="state" name="state" required>
                                        </div>
                                        <div class="form-group">
                                            <label for="zipCode">
                                                <i class="fas fa-mail-bulk"></i>
                                                ZIP Code
                                            </label>
                                            <input type="text" id="zipCode" name="zipCode" required>
                                        </div>
                                    </div>

                                    <div class="form-actions">
                                        <button type="button" class="btn-cancel"
                                            onclick="hideAddressForm()">Cancel</button>
                                        <button type="submit" class="btn-save" id="saveAddressButton">Save
                                            Address</button>
                                    </div>

                                </form>
                            </div>
                        </div>
                    </div>
                </section>

                
                <% if (cart && cart.length> 0) { %>
                    <section class="ordered-products-section">
                        <h2>Order Items</h2>
                        <div class="ordered-items">
                            <% cart.forEach(item=> { %>
                                <div class="order-item">
                                    <div class="item-details">
                                        <div class="item-image">
                                            <img src="<%= item.image %>" alt="<%= item.productName %>"
                                                onerror="this.src='/images/default-product.png'">
                                        </div>
                                        <div class="item-info">
                                            <h4>
                                                <%= item.productName %>
                                            </h4>
                                            <% if (item.offer> 0) { %>
                                                <p class="item-price">
                                                    <span
                                                        class="original-price text-decoration-line-through text-muted">$
                                                        <%= item.price.toFixed(2) %></span>
                                                    <span class="discounted-price text-danger">$<%=
                                                            item.discountedPrice.toFixed(2) %></span>
                                                    <span class="offer-badge">-<%= item.offer %>% OFF</span>
                                                </p>
                                                <% } else { %>
                                                    <p class="item-price">$<%= item.price.toFixed(2) %>
                                                    </p>
                                                    <% } %>
                                                        <p class="item-quantity">Quantity: <%= item.quantity %>
                                                        </p>
                                                        <p class="item-color">Color: <%= item.color %>
                                                        </p>
                                        </div>
                                    </div>
                                    <div class="item-total">
                                        $<%= (item.discountedPrice * item.quantity).toFixed(2) %>
                                    </div>
                                </div>
                                <% }) %>
                        </div>

                        
                        <div class="available-coupons-section">
                            <h3>Available Coupons for You</h3>
                            <div class="coupon-list">
                                <% if (coupons && coupons.length > 0) { %>
                                    <% coupons.forEach(coupon=> { %>
                                        <div class="coupon-item">
                                            <label class="coupon-radio">
                                                <input type="radio" name="coupon" value="<%= coupon.code %>">
                                                <div class="coupon-details">
                                                    <div class="coupon-header">
                                                        <span class="coupon-discount">
                                                            <%= coupon.discount %>% OFF
                                                        </span>
                                                        <span class="coupon-code">
                                                            <%= coupon.code %>
                                                        </span>
                                                    </div>
                                                    <div class="coupon-terms">
                                                        <% if (coupon.minPurchase) { %>
                                                            <p>Min. Purchase: $<%= coupon.minPurchase %>
                                                            </p>
                                                            <% } %>
                                                                <% if (coupon.maxDiscount) { %>
                                                                    <p>Max Discount: $<%= coupon.maxDiscount %>
                                                                    </p>
                                                                    <% } %>
                                                                        <p class="expiry">Expires: <%= new
                                                                                Date(coupon.expirationDate).toLocaleDateString()
                                                                                %>
                                                                        </p>
                                                    </div>
                                                </div>
                                            </label>
                                        </div>
                                        <% }); %>
                                <% } else { %>
                                    <div class="no-coupons-message">
                                        <p>No coupons available for you at this moment.</p>
                                    </div>
                                <% } %>
                            </div>
                            <div id="couponMessage" class="coupon-message"></div>
                        </div>
                    </section>
                    <% } else { %>
                        <p>No items in the cart.</p>
                        <% } %>



            </div>


            <div class="checkout-right">
                <section class="payment-section">
                    <h2>Payment Method</h2>


                    <div class="payment-options">
                        <div class="payment-option">
                            <input type="radio" name="payment" value="wallet" id="wallet">
                            <label for="wallet">Wallet (Balance: $<span id="walletBalance"><%= wallet?.balance %></span>)</label>
                            <div id="walletInfo" class="payment-details" style="display: none; margin-top: 10px; width: 100%;">
                                <div class="wallet-status" id="walletStatus"></div>
                            </div>
                        </div>
                        <div class="payment-option">
                            <input type="radio" name="payment" value="cod" id="cod" <% if (total > 5000) { %>disabled<% } else { %>checked<% } %>>
                            <label for="cod" <% if (total > 5000) { %>class="text-muted"<% } %>>Cash on Delivery <% if (total > 5000) { %><span class="cod-limit-message">(Not available for orders over $5000)</span><% } %></label>
                        </div>
                        <div class="payment-option">
                            <input type="radio" name="payment" value="razorpay" id="razorpay" <% if (total > 5000) { %>checked<% } %>>
                            <label for="razorpay">Pay Online (Razorpay)</label>
                        </div>
                    </div>
                </section>
                <div class="order-summary">
                    <h2>Order Summary</h2>
                    <div class="price-details">
                        <div class="price-row subtotal">
                            <span>Subtotal</span>
                            <span>$<%= subtotal.toFixed(2) %></span>
                        </div>
                        <div class="price-row discount">
                            <span>Product Discount</span>
                            <span>-$<%= totalDiscount.toFixed(2) %></span>
                        </div>
                        <div class="price-row coupon-discount" style="display: none;">
                            <span>Coupon Discount (<span class="applied-coupon-code"></span>)</span>
                            <span>-$0.00</span>
                        </div>
                        <div class="price-row tax">
                            <span>Tax (10%)</span>
                            <span>$<%= tax.toFixed(2) %></span>
                        </div>
                        <div class="price-row shipping">
                            <span>Shipping</span>
                            <span>$0.00</span>
                        </div>
                        <div class="price-row total">
                            <span>Total</span>
                            <span id="cart-total">$<%= total.toFixed(2) %></span>
                        </div>
                    </div>

                    <button id="proceedButton" class="btn-proceed" onclick="placeOrder()">
                        Place Order
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="paymentFailedModal" tabindex="-1" aria-labelledby="paymentFailedModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="paymentFailedModalLabel">Payment Failed</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="paymentFailedMessage">Your payment could not be processed. The order will remain pending.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="retryPayment()">Retry Payment</button>
                    <a href="/orders" class="btn btn-info">View Orders</a>
                </div>
            </div>
        </div>
    </div>

    <script>
        let selectedAddressId = null;

        function showAddressForm() {
            const modal = document.getElementById('addressFormModal');
            modal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        }

        function hideAddressForm() {
            const modal = document.getElementById('addressFormModal');
            modal.style.display = 'none';
            document.body.style.overflow = '';
        }

        function openAddressModal() {
            const modal = document.getElementById('addressModal');
            modal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        }

        function closeAddressModal() {
            const modal = document.getElementById('addressModal');
            modal.style.display = 'none';
            document.body.style.overflow = '';
        }

        async function selectAddress(addressId) {
            try {
                const response = await fetch('/select-address', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ addressId })
                });
                const data = await response.json();
                console.log("Address selection response:", data);

                if (response.ok) {
                    selectedAddressId = addressId;

                    if (data.selectedAddress) {
                        document.querySelector(".current-address").innerHTML = `
                    <div class="address-card selected">
                        <div class="address-details">
                            <div class="address-icon">
                                <i class="fas fa-map-marker-alt"></i>
                            </div>
                            <div class="address-text">
                                <p class="name">${data.selectedAddress.fullName}</p>
                                <p class="street">${data.selectedAddress.street}</p>
                                <p class="location">${data.selectedAddress.city}, ${data.selectedAddress.state} ${data.selectedAddress.zipCode}</p>
                                <p class="phone"><i class="fas fa-phone"></i> ${data.selectedAddress.phone}</p>
                            </div>
                        </div>
                        <button class="btn btn-primary" onclick="openAddressModal()">
                            <i class="fas fa-map-marker-alt"></i> Change Delivery Location
                        </button>
                    </div>
                `;
                    }
                } else {
                    throw new Error('Failed to select address');
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Address Selection Error',
                    text: 'Error selecting address: ' + error.message
                });
            }
            closeAddressModal();
        }

        document.getElementById('newAddressForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            if (!validateAddressForm()) {
                return false;
            }

            try {
                const formData = new FormData(e.target);
                const addressData = Object.fromEntries(formData.entries());

                // Send address data to server
                const response = await fetch('/add-address', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(addressData)
                });

                const result = await response.json();

                if (response.ok) {
                    // Update UI with the saved address
                    selectedAddressId = result.address._id; // Store the new address ID
                    updateSelectedAddressUI(result.address);
                    hideAddressForm();

                    // Show success message
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Address saved successfully!',
                        timer: 2000,
                        showConfirmButton: false
                    });

                    // Reset the form
                    e.target.reset();
                } else {
                    throw new Error(result.message || 'Failed to save address');
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to save address: ' + error.message
                });
            }
        });

        
        function validateAddressForm() {
            
            const fullName = document.getElementById('fullName').value.trim();
            const phone = document.getElementById('phone').value.trim();
            const street = document.getElementById('street').value.trim();
            const city = document.getElementById('city').value.trim();
            const state = document.getElementById('state').value.trim();
            const zipCode = document.getElementById('zipCode').value.trim();
            
            
            document.querySelectorAll('.error-message').forEach(el => el.remove());
            
            let isValid = true;
            
            
            if (!fullName || !/^[A-Za-z\s\-']{2,50}$/.test(fullName)) {
                showError('fullName', 'Please enter a valid name (2-50 characters, letters only)');
                isValid = false;
            }
            
            
            
            const phoneDigits = phone.replace(/\D/g, '');
            
            
            if (!phoneDigits.match(/^[6-9]/)) {
                showError('phone', 'Phone number must start with 6, 7, 8, or 9');
                isValid = false;
            }
            
            else if (phoneDigits.length < 10 || phoneDigits.length > 15) {
                showError('phone', 'Please enter a valid phone number with 10-15 digits');
                isValid = false;
            }
            
            
            if (!street || street.length < 5) {
                showError('street', 'Please enter a valid street address (minimum 5 characters)');
                isValid = false;
            }
            
            
            if (!city || !/^[A-Za-z\s]{2,30}$/.test(city)) {
                showError('city', 'Please enter a valid city name (letters only)');
                isValid = false;
            }
            
            
            if (!state || !/^[A-Za-z\s]{2,30}$/.test(state)) {
                showError('state', 'Please enter a valid state name (letters only)');
                isValid = false;
            }
            
            
            if (!zipCode || !/^[A-Za-z0-9]{5,10}$/.test(zipCode)) {
                showError('zipCode', 'Please enter a valid ZIP/postal code (5-10 characters)');
                isValid = false;
            }
            
            return isValid;
        }

        
        function showError(fieldId, message) {
            const field = document.getElementById(fieldId);
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error-message';
            errorDiv.style.color = '#dc3545';
            errorDiv.style.fontSize = '12px';
            errorDiv.style.marginTop = '5px';
            errorDiv.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${message}`;
            field.parentNode.appendChild(errorDiv);
            field.style.borderColor = '#dc3545';
            
            
            field.addEventListener('input', function() {
                this.style.borderColor = '';
                const errorMsg = this.parentNode.querySelector('.error-message');
                if (errorMsg) errorMsg.remove();
            }, { once: true });
        }

        function updateSelectedAddressUI(address) {
            document.querySelector(".current-address").innerHTML = `
        <div class="address-card selected">
            <div class="address-details">
                <div class="address-icon">
                    <i class="fas fa-map-marker-alt"></i>
                </div>
                <div class="address-text">
                    <p class="name">${address.fullName}</p>
                    <p class="street">${address.street}</p>
                    <p class="location">${address.city}, ${address.state} ${address.zipCode}</p>
                    <p class="phone"><i class="fas fa-phone"></i> ${address.phone}</p>
                </div>
            </div>
            <button class="btn btn-primary" onclick="openAddressModal()">
                <i class="fas fa-map-marker-alt"></i> Change Delivery Location
            </button>
        </div>
    `;
        }






        async function placeOrder() {
          
            const currentAddressElement = document.querySelector(".current-address .address-card");
            const cartTotalElement = document.getElementById('cart-total');
            const cartTotal = parseFloat(cartTotalElement.textContent.trim().replace('$', '').replace(',', ''));

            console.log(cartTotal, "cartTotal");

            if (!currentAddressElement) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Address Required',
                    text: 'Please select or add a delivery address before placing the order.'
                });
                return;
            }

            const paymentMethod = document.querySelector('input[name="payment"]:checked').value;
            console.log("Selected payment method:", paymentMethod);
            
            // Check if wallet payment method is selected but has insufficient balance
            if (paymentMethod === 'wallet') {
                const walletBalance = parseFloat(document.getElementById('walletBalance').textContent);
                if (walletBalance < cartTotal) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Insufficient Balance',
                        text: `Your wallet balance ($${walletBalance.toFixed(2)}) is insufficient for this order ($${cartTotal.toFixed(2)}). Please add funds or choose a different payment method.`
                    });
                    return;
                }
            }
            
            if (paymentMethod === 'cod' && cartTotal > 5000) {
                Swal.fire({
                    icon: 'error',
                    title: 'Payment Method Not Available',
                    text: 'Cash on Delivery is not available for orders over $5000. Please choose another payment method.'
                });
                return;
            }

            let orderData = {
                paymentMethod: paymentMethod,
                cartTotal: cartTotal 
            };

            if (selectedAddressId) {
                console.log("Using selected address ID:", selectedAddressId);
                orderData.addressId = selectedAddressId;
            } else {
                const newAddress = {
                    fullName: document.querySelector(".current-address .name")?.textContent.trim(),
                    phone: document.querySelector(".current-address .phone")?.textContent.replace(/[^\d]/g, '').trim(),
                    street: document.querySelector(".current-address .street")?.textContent.trim(),
                    city: document.querySelector(".current-address .location")?.textContent.split(',')[0].trim(),
                    state: document.querySelector(".current-address .location")?.textContent.split(',')[1]?.trim().split(' ')[0],
                    zipCode: document.querySelector(".current-address .location")?.textContent.split(',')[1]?.trim().split(' ')[1]
                };

                console.log("Extracted address:", newAddress);

                if (!Object.values(newAddress).every(value => value)) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Invalid Address',
                        text: 'Please select a valid delivery address.'
                    });
                    return;
                }

                orderData.newAddress = newAddress;
            }

            const selectedCoupon = document.querySelector('input[name="coupon"]:checked');
            if (selectedCoupon) {
                orderData.couponCode = selectedCoupon.value;
            }

            

            try {
                if (paymentMethod === 'razorpay') {

                    orderData.cartTotal = cartTotal;

                    const razorpayResponse = await fetch('/create', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(orderData)
                    });

                    const razorpayData = await razorpayResponse.json();

                    const options = {
                        key: razorpayData.razorpayKeyId,
                        amount: Math.round(cartTotal * 100),
                        currency: 'INR',
                        name: "Your Store Name",
                        description: "Purchase Payment",
                        order_id: razorpayData.razorpayOrderId,
                        handler: async function (response) {
                            try {
                                const verifyResponse = await fetch('/verify-payment', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        orderId: razorpayData.orderId,
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_signature: response.razorpay_signature,
                                        status: 'success'
                                    })
                                });

                                const result = await verifyResponse.json();

                                if (verifyResponse.ok) {
                                    window.location.href = `/order/success/${result.orderId}`;
                                } else {
                                    await handlePaymentFailure(razorpayData.orderId);
                                }
                            } catch (error) {
                                console.error('Payment verification failed:', error);
                                await handlePaymentFailure(razorpayData.orderId);
                            }
                        },
                        modal: {
                            ondismiss: async function() {
                                try {
                                    await handlePaymentFailure(razorpayData.orderId);
                                } catch (error) {
                                    console.error('Error handling payment failure:', error);
                                }
                            }
                        },
                        prefill: {
                            name: document.querySelector(".current-address .name")?.textContent.trim() || "",
                            contact: document.querySelector(".current-address .phone")?.textContent.replace(/[^\d]/g, '') || ""
                        },
                        theme: {
                            color: "#3399cc"
                        }
                    };

                    const razorpayInstance = new Razorpay(options);
                    razorpayInstance.open();

                } else {
                    const response = await fetch('/order/place', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(orderData)
                    });

                    const result = await response.json();

                    if (response.ok) {
                        window.location.href = `/order/success/${result.orderId}`;
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Order Error',
                            text: `Error placing order: ${result.message}`
                        });
                    }
                }
            } catch (error) {
                console.error("Order placement error:", error);
                Swal.fire({
                    icon: 'error',
                    title: 'Order Error',
                    text: 'Error placing order: ' + error.message
                });
            }
        }


        async function fetchWalletBalance() {
            try {
                const response = await fetch('/wallet/balance');
                const data = await response.json();

                if (response.ok) {
                    document.getElementById('walletBalance').textContent = data.balance.toFixed(2);

                   
                    if (document.getElementById('wallet').checked) {
                        checkWalletBalance();
                    }
                } else {
                    console.error('Error fetching wallet balance:', data.message);
                }
            } catch (error) {
                console.error('Error fetching wallet balance:', error);
            }
        }

        
        function checkWalletBalance() {
            const walletBalance = parseFloat(document.getElementById('walletBalance').textContent);
            const cartTotalElement = document.getElementById('cart-total');
            const orderTotal = parseFloat(cartTotalElement.textContent.trim().replace('$', '').replace(',', ''));
            const walletStatus = document.getElementById('walletStatus');

            if (walletBalance >= orderTotal) {
                walletStatus.textContent = 'You have sufficient balance to complete this purchase.';
                walletStatus.className = 'wallet-status success';
            } else {
                walletStatus.textContent = `Insufficient balance. You need $${(orderTotal - walletBalance).toFixed(2)} more.`;
                walletStatus.className = 'wallet-status error';
            }
        }

       
        document.addEventListener('DOMContentLoaded', function () {
            
            fetchWalletBalance();
            
            // Check if wallet is already selected and show balance status
            if (document.getElementById('wallet').checked) {
                document.getElementById('walletInfo').style.display = 'block';
                checkWalletBalance();
            }
            
            const cartTotal = parseFloat(document.getElementById('cart-total').textContent.trim().replace('$', '').replace(',', ''));
            if (cartTotal > 5000) {
                document.getElementById('cod').disabled = true;
                document.getElementById('razorpay').checked = true;
            }

            
            const paymentMethods = document.querySelectorAll('input[name="payment"]');
            paymentMethods.forEach(method => {
                method.addEventListener('change', function () {
                    const walletInfo = document.getElementById('walletInfo');

                    if (this.value === 'wallet') {
                        walletInfo.style.display = 'block';
                        checkWalletBalance();
                    } else {
                        walletInfo.style.display = 'none';
                    }
                });
            });
        });

        async function applyCoupon() {
            const couponCode = document.getElementById('couponCode').value;
            const messageDiv = document.getElementById('couponMessage');

            try {
                const response = await fetch('/apply-coupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        couponCode,
                        subtotal: <%= subtotal %> 
            })
            });

            const data = await response.json();

            if (response.ok) {
                messageDiv.innerHTML = `<span class="success">Coupon applied! You saved $${data.discountAmount}</span>`;
                
                document.querySelector('.price-row.discount span:last-child').textContent =
                    `-$${(parseFloat(data.totalDiscount)).toFixed(2)}`;
                document.querySelector('.price-row.total span:last-child').textContent =
                    `$${data.newTotal.toFixed(2)}`;
            } else {
                messageDiv.innerHTML = `<span class="error">${data.message}</span>`;
            }
        }  catch (error) {
            messageDiv.innerHTML = '<span class="error">Error applying coupon</span>';
        }
}

        document.querySelectorAll('input[name="coupon"]').forEach(radio => {
            radio.addEventListener('change', async function () {
                if (this.checked) {
                    // Uncheck all other coupon radios first
                    document.querySelectorAll('input[name="coupon"]').forEach(otherRadio => {
                        if (otherRadio !== this) {
                            otherRadio.checked = false;
                        }
                    });
                    
                    const couponCode = this.value;
                    const messageDiv = document.getElementById('couponMessage');

                    try {
                        const response = await fetch('/apply-coupon', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                couponCode,
                                subtotal: <%= subtotal %> 
                            })
                        });

                        const data = await response.json();

                        if (response.ok) {
                            // Show success message
                            messageDiv.className = 'coupon-message success';
                            messageDiv.textContent = `Coupon applied! You saved $${data.discountAmount}`;

                            // Update discount display
                            const couponDiscountRow = document.querySelector('.price-row.coupon-discount');
                            couponDiscountRow.style.display = 'flex';
                            couponDiscountRow.querySelector('span:first-child').innerHTML = 
                                `Coupon Discount (<span class="applied-coupon-code">${couponCode}</span>)`;
                            couponDiscountRow.querySelector('span:last-child').textContent = `-$${data.discountAmount.toFixed(2)}`;
                            
                            // Update product discount display (keep original)
                            document.querySelector('.price-row.discount span:last-child').textContent = 
                                `-$${<%= totalDiscount.toFixed(2) %>}`;
                            
                            // Update total
                            document.querySelector('.price-row.total span:last-child').textContent = 
                                `$${data.newTotal.toFixed(2)}`;
                            document.getElementById('cart-total').textContent = `$${data.newTotal.toFixed(2)}`;
                        } else {
                            // Show error message
                            messageDiv.className = 'coupon-message error';
                            messageDiv.textContent = data.message;
                            this.checked = false;
                            
                            // Reset discount display
                            resetCouponDisplay();
                        }
                    } catch (error) {
                        // Show error message on exception
                        messageDiv.className = 'coupon-message error';
                        messageDiv.textContent = 'Error applying coupon';
                        this.checked = false;
                        
                        // Reset discount display
                        resetCouponDisplay();
                    }
                }
            });
        });

        // Add this helper function to reset coupon displays
        function resetCouponDisplay() {
            // Hide coupon discount row
            const couponDiscountRow = document.querySelector('.price-row.coupon-discount');
            couponDiscountRow.style.display = 'none';
            
            // Reset product discount to original
            document.querySelector('.price-row.discount span:last-child').textContent = 
                `-$${<%= totalDiscount.toFixed(2) %>}`;
            
            // Reset total to original
            document.querySelector('.price-row.total span:last-child').textContent = 
                `$${<%= total.toFixed(2) %>}`;
            document.getElementById('cart-total').textContent = `$${<%= total.toFixed(2) %>}`;
        }

        // Update removeCoupon function to use the helper
        function removeCoupon() {
            const couponInputs = document.querySelectorAll('input[name="coupon"]');
            couponInputs.forEach(input => input.checked = false);
            
            resetCouponDisplay();
            
            const messageDiv = document.getElementById('couponMessage');
            messageDiv.textContent = '';
            messageDiv.className = 'coupon-message';
        }

        async function handlePaymentFailure(orderId) {
            try {
                
                const response = await fetch('/verify-payment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        orderId: orderId,
                        paymentStatus: 'failed',
                        razorpay_payment_id: '',
                        razorpay_order_id: '',
                        razorpay_signature: ''
                    })
                });

                await response.json(); 
                
                
                const result = await Swal.fire({
                    icon: 'warning',
                    title: 'Payment Failed',
                    text: 'Payment failed. Your order has been placed with payment pending status.',
                    showCancelButton: true,
                    confirmButtonText: 'OK',
                    cancelButtonText: 'Retry Payment',
                    reverseButtons: true,
                    allowOutsideClick: false, 
                    allowEscapeKey: false 
                });

                
                if (result.isConfirmed) {
                    window.location.href = `/order/success/${orderId}`;
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                    
                    await retryPayment();
                }

            } catch (error) {
                console.error('Error handling payment failure:', error);
                
                await Swal.fire({
                    icon: 'error', 
                    title: 'Error',
                    text: 'Failed to update order status. Please check your orders page.',
                    confirmButtonText: 'OK',
                    allowOutsideClick: false,
                    allowEscapeKey: false
                });
                window.location.href = `/order/success/${orderId}`;
            }
        }

        function retryPayment() {
            const paymentFailedModal = bootstrap.Modal.getInstance(document.getElementById('paymentFailedModal'));
            paymentFailedModal.hide();
            
            
            setTimeout(() => {
                const razorpayInstance = new Razorpay(options);
                razorpayInstance.open();
            }, 500);
        }

    </script>
</body>

</html>