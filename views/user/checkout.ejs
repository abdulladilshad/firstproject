<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/styles/checkout.css">
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style></style>
</head>

<body>
    <div class="checkout-container">

        <!-- Main Content -->
        <div class="checkout-content">
            <!-- Left Section -->
            <div class="checkout-left">
                <!-- Address Section -->
                <section class="address-section">
                    <h2>Shipping Address</h2>
                    <button class="btn-add-address ripple" onclick="showAddressForm()">
                        <div class="btn-content">
                            <i class="fas fa-plus"></i>
                            <span>Add New Address</span>
                        </div>
                    </button>


                    <!-- Current Selected Address -->
                    <div class="current-address">
                        <% if (selectedAddress) { %>

                            <div class="address-card selected">
                                <div class="address-details">
                                    <div class="address-icon">
                                        <i class="fas fa-map-marker-alt"></i>
                                    </div>
                                    <div class="address-text">
                                        <p class="name">
                                            <%= selectedAddress.fullName %>
                                        </p>
                                        <p class="street">
                                            <%= selectedAddress.street %>
                                        </p>
                                        <p class="location">
                                            <%= selectedAddress.city %>, <%= selectedAddress.state %>
                                                    <%= selectedAddress.zipCode %>
                                        </p>
                                        <p class="phone"><i class="fas fa-phone"></i>
                                            <%= selectedAddress.phone %>
                                        </p>
                                    </div>
                                </div>
                                <button class="btn  btn-primary" onclick="openAddressModal()">
                                    <i class="fas fa-map-marker-alt"></i> Change Delivery Location
                                </button>
                            </div>
                            <% } else { %>
                                <div class="no-address">
                                    <i class="fas fa-home"></i>
                                    <p>No address selected</p>
                                </div>
                                <% } %>
                    </div>

                    <!-- Address Selection Modal -->
                    <div id="addressModal" class="modal">
                        <div class="modal-content">
                            <div class="modal-header">
                                <div class="header-title">
                                    <i class="fas fa-map-marked-alt"></i>
                                    <h3>Select Delivery Address</h3>
                                </div>
                                <button class="close-btn" onclick="closeAddressModal()">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                            <div class="modal-body">
                                <div class="address-search">
                                    <i class="fas fa-search"></i>
                                    <input type="text" placeholder="Search saved addresses..." id="addressSearch">
                                </div>
                                <div class="address-list">
                                    <% if (addresses && addresses.length> 0) { %>
                                        <% addresses.forEach(address=> { %>
                                            <div class="address-card-select"
                                                onclick="selectAddress('<%= address._id %>')">
                                                <div class="card-content">
                                                    <div class="address-type">

                                                    </div>
                                                    <div class="address-details">
                                                        <h4>
                                                            <%= address.fullName %>
                                                        </h4>
                                                        <p class="address-line">
                                                            <%= address.street %>
                                                        </p>
                                                        <p class="address-line">
                                                            <%= address.city %>, <%= address.state %>
                                                                    <%= address.zipCode %>
                                                        </p>
                                                        <p class="phone-line"><i class="fas fa-phone"></i>
                                                            <%= address.phone %>
                                                        </p>
                                                    </div>
                                                    <div class="select-indicator">
                                                        <div class="radio-circle"></div>
                                                        <span>Deliver Here</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <% }) %>
                                                <% } %>
                                                    <button class="add-address-card" onclick="showAddressForm()">
                                                        <div class="add-icon">
                                                            <i class="fas fa-plus"></i>
                                                        </div>
                                                        <span>Add New Address</span>
                                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Add New Address Form Modal -->
                    <div id="addressFormModal" class="modal">
                        <div class="modal-content">
                            <div class="modal-header">
                                <div class="header-title">
                                    <i class="fas fa-plus-circle"></i>
                                    <h3>Add New Address</h3>
                                </div>
                                <button class="close-btn" onclick="hideAddressForm()">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                            <div class="modal-body">
                                <form id="newAddressForm" class="address-form">
                                    <div class="form-grid">
                                        <div class="form-group">
                                            <label for="fullName">
                                                <i class="fas fa-user"></i>
                                                Full Name
                                            </label>
                                            <input type="text" id="fullName" name="fullName" required>
                                        </div>
                                        <div class="form-group">
                                            <label for="phone">
                                                <i class="fas fa-phone"></i>
                                                Phone Number
                                            </label>
                                            <input type="tel" id="phone" name="phone" required>
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label for="street">
                                            <i class="fas fa-map-marker-alt"></i>
                                            Street Address
                                        </label>
                                        <input type="text" id="street" name="street" required>
                                    </div>

                                    <div class="form-grid three-columns">
                                        <div class="form-group">
                                            <label for="city">
                                                <i class="fas fa-city"></i>
                                                City
                                            </label>
                                            <input type="text" id="city" name="city" required>
                                        </div>
                                        <div class="form-group">
                                            <label for="state">
                                                <i class="fas fa-map"></i>
                                                State
                                            </label>
                                            <input type="text" id="state" name="state" required>
                                        </div>
                                        <div class="form-group">
                                            <label for="zipCode">
                                                <i class="fas fa-mail-bulk"></i>
                                                ZIP Code
                                            </label>
                                            <input type="text" id="zipCode" name="zipCode" required>
                                        </div>
                                    </div>

                                    <div class="form-actions">
                                        <button type="button" class="btn-cancel" onclick="hideAddressForm()">Cancel</button>
                                        <button type="submit" class="btn-save" id="saveAddressButton">Save Address</button>
                                    </div>
                                    
                                </form>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Ordered Products Section -->
                <% if (cart && cart.length > 0) { %>
                    <section class="ordered-products-section">
                        <h2>Order Items</h2>
                        <div class="ordered-items">
                            <% cart.forEach(item => { %>
                                <div class="order-item">
                                    <div class="item-details">
                                        <div class="item-image">
                                            <img src="<%= item.image %>" alt="<%= item.productName %>"
                                                onerror="this.src='/images/default-product.png'">
                                        </div>
                                        <div class="item-info">
                                            <h4><%= item.productName %></h4>
                                            <p class="item-price">$<%= item.price %></p>
                                            <p class="item-quantity">Quantity: <%= item.quantity %></p>
                                            <p class="item-color">Color: <%= item.color %></p> <!-- ✅ Added color here -->
                                        </div>
                                    </div>
                                    <div class="item-total">
                                        $<%= (item.price * item.quantity).toFixed(2) %>
                                    </div>
                                </div>
                            <% }) %>
                        </div>
                    </section>
                <% } else { %>
                    <p>No items in the cart.</p>
                <% } %>
                


            </div>

            
            <div class="checkout-right">
                <section class="payment-section">
                    <h2>Payment Method</h2>
                    <div class="payment-option">
                        <input type="radio" name="payment" value="cod" id="cod" checked>
                        <label for="cod">Cash on Delivery</label>
                    </div>
                    <div class="payment-option">
                        <input type="radio" name="payment" value="razorpay" id="razorpay">
                        <label for="razorpay">Pay Online (Razorpay)</label>
                    </div>
                </section>
                <div class="order-summary">
                    <h2>Order Summary</h2>

                    
                    <div class="price-details">
                        <div class="price-row">
                            <span>Subtotal</span>
                            <span>$<%= subtotal.toFixed(2) %></span>
                        </div>
                        <div class="price-row">
                            <span>Tax (10%)</span>
                            <span>$<%= tax.toFixed(2) %></span>
                        </div>
                        <div class="price-row">
                            <span>Shipping</span>
                            <span>$0.00</span>
                        </div>
                        <div class="price-row total">
                            <span>Total</span>
                            <span>$<%= total.toFixed(2) %></span>
                        </div>
                    </div>

                    <button id="proceedButton" class="btn-proceed" onclick="placeOrder()">
                        Place Order
                    </button>
                </div>
            </div>
        </div>
    </div>



    <script>
        let selectedAddressId = null;

        function showAddressForm() {
            document.getElementById('addressFormModal').style.display = 'block';
        }

        function hideAddressForm() {
            document.getElementById('addressFormModal').style.display = 'none';
        }

        function openAddressModal() {
            document.getElementById('addressModal').style.display = 'block';
        }

        function closeAddressModal() {
            document.getElementById('addressModal').style.display = 'none';
        }
        async function selectAddress(addressId) {
            try {
                const response = await fetch('/select-address', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ addressId })
                });
                const data = await response.json();
                console.log("Address selection response:", data);

                if (response.ok) {
                    selectedAddressId = addressId;
                    
                    if (data.selectedAddress) {
                        document.querySelector(".current-address").innerHTML = `
                    <div class="address-card selected">
                        <div class="address-details">
                            <div class="address-icon">
                                <i class="fas fa-map-marker-alt"></i>
                            </div>
                            <div class="address-text">
                                <p class="name">${data.selectedAddress.fullName}</p>
                                <p class="street">${data.selectedAddress.street}</p>
                                <p class="location">${data.selectedAddress.city}, ${data.selectedAddress.state} ${data.selectedAddress.zipCode}</p>
                                <p class="phone"><i class="fas fa-phone"></i> ${data.selectedAddress.phone}</p>
                            </div>
                        </div>
                        <button class="btn btn-primary" onclick="openAddressModal()">
                            <i class="fas fa-map-marker-alt"></i> Change Delivery Location
                        </button>
                    </div>
                `;
                    }
                } else {
                    throw new Error('Failed to select address');
                }
            } catch (error) {
                alert('Error selecting address: ' + error.message);
            }
            closeAddressModal();
        }

        document.getElementById('newAddressForm').addEventListener('submit', async (e) => {
    e.preventDefault();

    console.log("📤 Submitting new address...");
    const formData = new FormData(e.target);
    const addressData = Object.fromEntries(formData.entries());

    
    addressData.id = `temp-${Date.now()}`; 

    
    updateSelectedAddressUI(addressData);


    hideAddressForm();
});

function updateSelectedAddressUI(address) {
    document.querySelector(".current-address").innerHTML = `
        <div class="address-card selected">
            <div class="address-details">
                <div class="address-icon">
                    <i class="fas fa-map-marker-alt"></i>
                </div>
                <div class="address-text">
                    <p class="name">${address.fullName}</p>
                    <p class="street">${address.street}</p>
                    <p class="location">${address.city}, ${address.state} ${address.zipCode}</p>
                    <p class="phone"><i class="fas fa-phone"></i> ${address.phone}</p>
                </div>
            </div>
            <button class="btn btn-primary" onclick="openAddressModal()">
                <i class="fas fa-map-marker-alt"></i> Change Delivery Location
            </button>
        </div>
    `;
}


 

async function placeOrder() {
    console.log("🚀 placeOrder() function called!");
    
    // Check if address is selected
    const currentAddressElement = document.querySelector(".current-address .address-card");
    
    if (!currentAddressElement) {
        alert("Please select or add a delivery address before placing the order.");
        return;
    }

    // Get selected payment method
    const paymentMethod = document.querySelector('input[name="payment"]:checked').value;
    console.log("Selected payment method:", paymentMethod);
    
    let orderData = {
        paymentMethod: paymentMethod
    };

    // Handle address
    if (selectedAddressId) {
        console.log("Using selected address ID:", selectedAddressId);
        orderData.addressId = selectedAddressId;

        console.log("No selected address ID, extracting from UI");
        const newAddress = {
            fullName: document.querySelector(".current-address .name")?.textContent.trim(),
            phone: document.querySelector(".current-address .phone")?.textContent.replace(/[^\d]/g, '').trim(),
            street: document.querySelector(".current-address .street")?.textContent.trim(),
            city: document.querySelector(".current-address .location")?.textContent.split(',')[0].trim(),
            state: document.querySelector(".current-address .location")?.textContent.split(',')[1]?.trim().split(' ')[0],
            zipCode: document.querySelector(".current-address .location")?.textContent.split(',')[1]?.trim().split(' ')[1]
        };
        orderData.newAddress = newAddress;
        console.log("Extracted address:", newAddress);
    } else {
        // Get address from the UI
        console.log("No selected address ID, extracting from UI");
        const newAddress = {
            fullName: document.querySelector(".current-address .name")?.textContent.trim(),
            phone: document.querySelector(".current-address .phone")?.textContent.replace(/[^\d]/g, '').trim(),
            street: document.querySelector(".current-address .street")?.textContent.trim(),
            city: document.querySelector(".current-address .location")?.textContent.split(',')[0].trim(),
            state: document.querySelector(".current-address .location")?.textContent.split(',')[1]?.trim().split(' ')[0],
            zipCode: document.querySelector(".current-address .location")?.textContent.split(',')[1]?.trim().split(' ')[1]
        };
        
        console.log("Extracted address:", newAddress);
        
        if (!Object.values(newAddress).every(value => value)) {
            alert("Please select a valid delivery address.");
            return;
        }

        orderData.newAddress = newAddress;
    }

    console.log("📤 Sending order data:", orderData);

    try {
        if (paymentMethod === 'razorpay') {
            console.log("Attempting to create Razorpay order...");
            
            try {
                const razorpayResponse = await fetch('/create', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(orderData)
                });
                
                console.log("Razorpay response status:", razorpayResponse.status);
                
                // Parse the response data
                let razorpayData;
                
                if (!razorpayResponse.ok) {
                    // Try to get the error details from the response
                    let errorDetails = '';
                    try {
                        razorpayData = await razorpayResponse.json();
                        console.log("Response data:", razorpayData);
                        errorDetails = razorpayData.message || razorpayData.error || JSON.stringify(razorpayData);
                    } catch (parseError) {
                        try {
                            errorDetails = await razorpayResponse.text();
                            console.log("Response text:", errorDetails);
                        } catch (textError) {
                            errorDetails = 'Could not parse error details';
                        }
                    }
                    
                    throw new Error(`Server error (${razorpayResponse.status}): ${errorDetails}`);
                } else {
                    // Success response
                    razorpayData = await razorpayResponse.json();
                    console.log("Response data:", razorpayData);
                }
                
                // Open Razorpay payment modal
                const options = {
                    key: razorpayData.razorpayKeyId,
                    amount: razorpayData.amount, // This is already in the smallest currency unit (cents/paise)
                    currency: razorpayData.currency,
                    name: "Your Store Name",
                    description: "Purchase Payment",
                    order_id: razorpayData.razorpayOrderId,
                    handler: async function(response) {
                        // On successful payment, verify the payment
                        try {
                            console.log("Payment successful, verifying...", response);
                            
                            const verifyData = {
                                orderId: razorpayData.orderId,
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_signature: response.razorpay_signature
                            };
                            
                            console.log("Sending verification data:", verifyData);
                            
                            const verifyResponse = await fetch('/verify-payment', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(verifyData)
                            });

                            const result = await verifyResponse.json();
                            
                            if (verifyResponse.ok) {
                                window.location.href = `/order/success/${result.orderId}`;
                            } else {
                                alert(`Payment verification failed: ${result.message}`);
                            }
                        } catch (error) {
                            alert('Error verifying payment: ' + error.message);
                        }
                    },
                    prefill: {
                        name: document.querySelector(".current-address .name")?.textContent.trim() || "",
                        contact: document.querySelector(".current-address .phone")?.textContent.replace(/[^\d]/g, '') || ""
                    },
                    theme: {
                        color: "#3399cc"
                    }
                };

                // For display purposes - convert from smallest currency unit to standard unit
                const displayAmount = razorpayData.amount / 100;

                // Log the amount details for debugging
                console.log("Razorpay payment details:", {
                    originalAmount: razorpayData.originalAmount,
                    razorpayAmount: razorpayData.amount,
                    displayAmount: displayAmount,
                    currency: razorpayData.currency
                });

                // Format the amount for display based on currency
                let formattedAmount;
                if (razorpayData.currency === 'USD') {
                    formattedAmount = `$${displayAmount.toFixed(2)}`;
                } else {
                    formattedAmount = `₹${displayAmount.toFixed(2)}`;
                    
                    // If we have the original USD amount, show that too
                    if (razorpayData.originalAmount) {
                        formattedAmount += ` ($${razorpayData.originalAmount.toFixed(2)})`;
                    }
                }

                console.log("Opening Razorpay with formatted amount:", formattedAmount);

                const razorpayInstance = new Razorpay(options);
                razorpayInstance.open();
                
            } catch (error) {
                console.error("Error creating Razorpay order:", error);
                alert('Error placing order: ' + error.message);
            }
        } else {
            // Regular COD order
            const response = await fetch('/order/place', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(orderData)
            });

            const result = await response.json();

            if (response.ok) {
                window.location.href = `/order/success/${result.orderId}`;
            } else {
                alert(`Error placing order: ${result.message}`);
            }
        }
    } catch (error) {
        console.error("Order placement error:", error);
        alert('Error placing order: ' + error.message);
    }
}


    </script>
</body>

</html>