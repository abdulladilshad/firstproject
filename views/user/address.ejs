<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Addresses</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/styles/address.css">
</head>

<body>
    <div class="container">
        <!-- Sidebar -->
        <div class="sidebar">
            <a href="/profile" class="sidebar-btn">
                <i class="fas fa-user"></i>
                <span>Profile</span>
            </a>
            <a href="/address" class="sidebar-btn active">
                <i class="fas fa-map-marker-alt"></i>
                <span>Addresses</span>
            </a>
            <a href="/orders" class="sidebar-btn">
                <i class="fas fa-shopping-bag"></i>
                <span>Orders</span>
            </a>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <h1>My Addresses</h1>
            <button class="btn btn-add" onclick="openAddModal()">
                <i class="fas fa-plus"></i> Add New Address
            </button>

            <div class="address-list">
                <% addresses.forEach(address=> { %>
                    <div class="address-card">
                        <% if (address.isDefault) { %>
                            <span class="default-badge">Default</span>
                            <% } %>
                                <h3>
                                    <%= address.fullName %>
                                </h3>
                                <p>
                                    <%= address.phone %>
                                </p>
                                <p>
                                    <%= address.street %>
                                </p>
                                <p>
                                    <%= address.city %>, <%= address.state %>
                                            <%= address.zipCode %>
                                </p>
                                <div class="address-actions">
                                    <button class="btn btn-edit" onclick="openEditModal('<%= address._id %>')">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                    <button class="btn btn-delete" onclick="deleteAddress('<%= address._id %>')">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                </div>
                    </div>
                    <% }); %>
            </div>
        </div>
    </div>

    <!-- Address Modal -->
    <div id="addressModal" class="modal">
        <div class="modal-content">
            <h2 id="modalTitle">Add New Address</h2>
            <form id="addressForm" class="address-form" novalidate>
                <input type="hidden" id="addressId">
                <div class="form-grid">
                    <div class="form-group">
                        <label for="fullName">
                            <i class="fas fa-user"></i>
                            Full Name
                        </label>
                        <input type="text" id="fullName" name="fullName">
                        <span class="error-message" id="fullName-error"></span>
                    </div>
                    <div class="form-group">
                        <label for="phone">
                            <i class="fas fa-phone"></i>
                            Phone Number
                        </label>
                        <input type="tel" id="phone" name="phone">
                        <span class="error-message" id="phone-error"></span>
                    </div>
                </div>

                <div class="form-group">
                    <label for="street">
                        <i class="fas fa-map-marker-alt"></i>
                        Street Address
                    </label>
                    <input type="text" id="street" name="street">
                    <span class="error-message" id="street-error"></span>
                </div>

                <div class="form-grid three-columns">
                    <div class="form-group">
                        <label for="city">
                            <i class="fas fa-city"></i>
                            City
                        </label>
                        <input type="text" id="city" name="city">
                        <span class="error-message" id="city-error"></span>
                    </div>
                    <div class="form-group">
                        <label for="state">
                            <i class="fas fa-map"></i>
                            State
                        </label>
                        <input type="text" id="state" name="state">
                        <span class="error-message" id="state-error"></span>
                    </div>
                    <div class="form-group">
                        <label for="zipCode">
                            <i class="fas fa-mail-bulk"></i>
                            ZIP Code
                        </label>
                        <input type="text" id="zipCode" name="zipCode">
                        <span class="error-message" id="zipCode-error"></span>
                    </div>
                </div>
                <div class="checkbox-group">
                    <input type="checkbox" id="isDefault">
                    <label for="isDefault">Set as default address</label>
                </div>
                <div class="address-actions">
                    <button type="submit" class="btn btn-add">Save Address</button>
                    <button type="button" class="btn btn-edit" onclick="closeModal()">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        const modal = document.getElementById('addressModal');
        const form = document.getElementById('addressForm');
        const fields = ['fullName', 'phone', 'street', 'city', 'state', 'zipCode'];

        function openAddModal() {
            document.getElementById('modalTitle').textContent = 'Add New Address';
            document.getElementById('addressId').value = '';
            form.reset();
            modal.style.display = 'block';
        }

        async function openEditModal(addressId) {
            document.getElementById('modalTitle').textContent = 'Edit Address';
            document.getElementById('addressId').value = addressId;

            try {
                const response = await fetch(`/addresses/${addressId}`);
                if (!response.ok) throw new Error('Failed to fetch address');

                const addressData = await response.json();
                console.log(addressData.address, 'uuuuuuuuuu'); // Debugging log

                if (addressData.success) {
                    const { fullName, phone, street, city, state, zipCode, isDefault } = addressData.address;

                    // Populate form fields
                    document.getElementById('fullName').value = fullName;
                    document.getElementById('phone').value = phone;
                    document.getElementById('street').value = street;
                    document.getElementById('city').value = city;
                    document.getElementById('state').value = state;
                    document.getElementById('zipCode').value = zipCode;cl
                    document.getElementById('isDefault').checked = isDefault;
                } else {
                    alert('Address not found');
                }
            } catch (error) {
                console.error('Error fetching address:', error);
                alert('Error loading address details');
            }

            document.getElementById('addressModal').style.display = 'block';
        }

        function closeModal() {
            modal.style.display = 'none';
            form.reset();
        }

        function validateField(field) {
            const input = document.getElementById(field);
            const errorElement = document.getElementById(`${field}-error`);
            let isValid = true;
            let errorMessage = '';

            switch (field) {
                case 'fullName':
                    if (!input.value.trim()) {
                        errorMessage = 'Full name is required';
                        isValid = false;
                    } else if (input.value.trim().length < 3) {
                        errorMessage = 'Name must be at least 3 characters';
                        isValid = false;
                    }
                    break;

                case 'phone':
                    const phoneRegex = /^\d{10}$/;
                    if (!input.value.trim()) {
                        errorMessage = 'Phone number is required';
                        isValid = false;
                    } else if (!phoneRegex.test(input.value.trim())) {
                        errorMessage = 'Enter a valid 10-digit phone number';
                        isValid = false;
                    }
                    break;

                case 'street':
                    if (!input.value.trim()) {
                        errorMessage = 'Street address is required';
                        isValid = false;
                    }
                    break;

                case 'city':
                    if (!input.value.trim()) {
                        errorMessage = 'City is required';
                        isValid = false;
                    }
                    break;

                case 'state':
                    if (!input.value.trim()) {
                        errorMessage = 'State is required';
                        isValid = false;
                    }
                    break;

                case 'zipCode':
                    const zipRegex = /^\d{6}$/;
                    if (!input.value.trim()) {
                        errorMessage = 'ZIP code is required';
                        isValid = false;
                    } else if (!zipRegex.test(input.value.trim())) {
                        errorMessage = 'Enter a valid 6-digit ZIP code';
                        isValid = false;
                    }
                    break;
            }

            input.classList.toggle('error', !isValid);
            errorElement.textContent = errorMessage;
            errorElement.classList.toggle('show', !isValid);

            return isValid;
        }

        // Add input event listeners for real-time validation
        fields.forEach(field => {
            const input = document.getElementById(field);
            input.addEventListener('input', () => validateField(field));
            input.addEventListener('blur', () => validateField(field));
        });

        // Form submission handler
        form.onsubmit = async (e) => {
            e.preventDefault();

            // Validate all fields
            const isValid = fields.every(field => validateField(field));
            if (!isValid) return;

            const formData = {
                fullName: document.getElementById('fullName').value.trim(),
                phone: document.getElementById('phone').value.trim(),
                street: document.getElementById('street').value.trim(),
                city: document.getElementById('city').value.trim(),
                state: document.getElementById('state').value.trim(),
                zipCode: document.getElementById('zipCode').value.trim(),
                isDefault: document.getElementById('isDefault').checked
            };

            try {
                const addressId = document.getElementById('addressId').value;
                const url = addressId ? `/addresses/${addressId}` : '/addresses';
                const method = addressId ? 'PUT' : 'POST';

                const response = await fetch(url, {
                    method,
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });

                if (response.ok) {
                    window.location.reload();
                } else {
                    const data = await response.json();
                    throw new Error(data.message || 'Error saving address');
                }
            } catch (error) {
                // Show error in form instead of alert
                const errorDiv = document.createElement('div');
                errorDiv.className = 'form-error-message show';
                errorDiv.textContent = error.message;
                form.insertBefore(errorDiv, form.firstChild);

                // Remove error message after 5 seconds
                setTimeout(() => errorDiv.remove(), 5000);
            }
        };

        async function deleteAddress(addressId) {
            if (!confirm('Are you sure you want to delete this address?')) return;

            try {
                const response = await fetch(`/addresses/${addressId}`, { method: 'DELETE' });

                if (response.ok) {
                    window.location.reload();
                } else {
                    const data = await response.json();
                    alert(data.message || 'Error deleting address');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error deleting address');
            }
        }

    </script>

</body>

</html>