<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <!-- Add Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/styles/cart.css">
</head>

<body>
    <h1>Your Shopping Cart</h1>

    <div id="cart-container">
        <% if (cart && cart.length> 0) { %>
            <div class="cart-layout">
                <div class="cart-table">
                    <table>
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th>Price</th>
                                <th>Quantity</th>
                                <th>Stock</th>
                                <th>Color</th> 
                                <th>Total</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% cart.forEach(item=> { %>
                                <tr id="cart-item-<%= item.id %>">
                                    <td>
                                        <%= item.name %>
                                    </td>
                                    <td>$<%= item.price %>
                                    </td>
                                    <td class="q-b-t">
                                        <button class="quantity-btn button-plus"
                                            onclick="updateQuantity('<%= item.productId %>', -1)">-</button>
                                        <span id="quantity-<%= item.productId %>">
                                            <%= item.quantity %>
                                        </span>
                                        <button class="quantity-btn button-plus"
                                            onclick="updateQuantity('<%= item.productId %>', 1)">+</button>
                                    </td>

                                    <td>
                                        <% if (item.stock <=0) { %>
                                            <span class="out-of-stock">Out of Stock</span>
                                            <% } else { %>
                                                <%= item.stock && 'In stock' %>
                                                    <% } %>
                                    </td>
                                    <td>
                                        <div class="color-indicator">
                                            <span class="color-dot"
                                                style="background-color: '<%= item.color || '#bd1212' %>"></span>
                                            <span class="color-name"
                                                style="color: '<%= item.color || '#bd1212' %>"></span>
                                            <%= item.color %>
                                        </div>
                                    </td>
                                    <td>$<%= (item.price * item.quantity).toFixed(2) %>
                                    </td>
                                    <td>
                                        <button onclick="removeFromCart('<%= item.productId %>')">
                                            <i class="fas fa-trash"></i> Remove
                                        </button>
                                    </td>
                                </tr>
                                <% }) %>
                        </tbody>
                    </table>
                </div>

                <div class="order-summary">
                    <h2>Order Summary</h2>
                    <div class="summary-item">
                        <span>Subtotal</span>
                        <span>$<%= cart.reduce((acc, item)=> acc + (item.price * item.quantity), 0).toFixed(2) %></span>
                    </div>
                    <div class="summary-item">
                        <span>Tax (10%)</span>
                        <span>$<%= (cart.reduce((acc, item)=> acc + (item.price * item.quantity), 0) * 0.1).toFixed(2)
                                %></span>
                    </div>
                    <div class="summary-item">
                        <span>Shipping</span>
                        <span>$00.00</span>
                    </div>
                    <div class="summary-item summary-total">
                        <span>Total</span>
                        <span>$<%= (cart.reduce((acc, item)=> acc + (item.price * item.quantity), 0) * 1.1 ).toFixed(2)
                                %></span>
                    </div>
                    <a href="/checkout" class="checkout-button">
                        <i class="fas fa-lock"></i> Proceed to Checkout
                    </a>
                </div>
            </div>
            <% } else { %>
                <div class="empty-cart">
                    <i class="fas fa-shopping-cart" style="font-size: 3rem; margin-bottom: 1rem;"></i>
                    <p>Your cart is empty.</p>
                </div>
                <% } %>
    </div>

    <div style="text-align: center; margin-top: 2rem;">
        <a href="/shope" class="continue-shopping">
            <i class="fas fa-arrow-left"></i> Continue Shopping
        </a>
    </div>
    <script>
        async function removeFromCart(itemId) {
            try {
                const response = await fetch(`/cart/remove/${itemId}`, { method: 'DELETE' });

                const text = await response.text();
                try {
                    var result = JSON.parse(text);
                } catch {
                    throw new Error(text);
                }

                if (response.ok) {
                    alert(result.message);

                   
                    const element = document.getElementById(`cart-item-${itemId}`);
                    if (element) {
                        element.classList.add('cart-item-remove'); 
                        setTimeout(() => {
                            element.remove();
                            updateCartTotals(); 

                            
                            const remainingItems = document.querySelectorAll('tbody tr').length;
                            if (remainingItems === 0) {
                                const cartContainer = document.querySelector('.cart-container');
                                if (cartContainer) {
                                    cartContainer.innerHTML = `
                                        <div class="empty-cart">
                                            <i class="fas fa-shopping-cart"></i>
                                            <p>Your cart is empty</p>
                                            <a href="/products" class="continue-shopping">Continue Shopping</a>
                                        </div>
                                    `;
                                }
                            }
                        }, 300); 
                    }
                } else {
                    throw new Error(result.message);
                }
                location.reload();

            } catch (error) {
                alert('Error: ' + error.message);
                console.error('Error removing item:', error);
            }
        }

        async function updateQuantity(productId, change) {
            const quantitySpan = document.getElementById(`quantity-${productId}`);
            console.log(quantitySpan);
            
    
            let currentQuantity = parseInt(quantitySpan.innerText);

            if ((change === -1 && currentQuantity === 1) || (change === 1 && currentQuantity >= 5)) {
                alert("Quantity must be between 1 and 5");
                return;
            }

            try {
                const response = await fetch(`/cart/update/${productId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({ change: change })
                });

                let result;
                try {
                    result = await response.json();
                } catch (e) {
                    throw new Error('Invalid server response');
                }

                if (response.ok) {
                    const newQuantity = result.newQuantity || currentQuantity + change;
                    quantitySpan.innerText = newQuantity;

                    const row = quantitySpan.closest('tr');
                    const priceCell = row.querySelector('td:nth-child(2)');
                    const totalCell = row.querySelector('td:nth-child(6)');
                    
                    if (priceCell && totalCell) {
                        const price = parseFloat(priceCell.innerText.replace('₹', ''));
                        const newTotal = price * newQuantity;
                        totalCell.innerText = `₹${newTotal.toFixed(2)}`;
                        totalCell.classList.add('price-update');
                        setTimeout(() => totalCell.classList.remove('price-update'), 300);
                    }

                    updateCartTotals();
                } else {
                    throw new Error(result.message || 'Failed to update quantity');
                }
            } catch (error) {
                console.error('Error updating quantity:', error);
                alert(error.message || 'Failed to update quantity. Please try again.');
            }
        }

        function updateCartTotals() {
            try {
                const cartItems = document.querySelectorAll('tbody tr');
                let subtotal = 0;

                cartItems.forEach(item => {
                    const priceText = item.querySelector('td:nth-child(2)').innerText;
                    const price = parseFloat(priceText.replace('₹', '').trim());
                    const quantity = parseInt(item.querySelector(`[id^="quantity-"]`).innerText.trim());
                    
                    if (!isNaN(price) && !isNaN(quantity)) {
                        subtotal += price * quantity;
                    }
                });

                const tax = subtotal * 0.1;
                const total = subtotal + tax;

                const summaryItems = document.querySelectorAll('.summary-item');
                summaryItems.forEach(item => {
                    const label = item.querySelector('span:first-child').innerText.toLowerCase();
                    const valueSpan = item.querySelector('span:last-child');
                    
                    if (valueSpan) {
                        let value = 0;
                        if (label.includes('subtotal')) {
                            value = subtotal;
                        } else if (label.includes('tax')) {
                            value = tax;
                        } else if (label.includes('total') && item.classList.contains('summary-total')) {
                            value = total;
                        }

                        valueSpan.classList.add('price-update');
                        valueSpan.innerText = `₹${value.toFixed(2)}`;
                        setTimeout(() => valueSpan.classList.remove('price-update'), 300);
                    }
                });

            } catch (error) {
                console.error('Error updating cart totals:', error);
            }
        }

        function formatCurrency(amount) {
            return new Intl.NumberFormat('en-IN', {
                style: 'currency',
                currency: 'INR',
                minimumFractionDigits: 2
            }).format(amount);
        }

    </script>
</body>

</html>