<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order History</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Marcellus&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/styles/ordersHistory.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.31/jspdf.plugin.autotable.min.js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        body {
            padding-top: 80px;
            /* Add padding for fixed navbar */
        }

        /* Navbar Styles */
        .navbar {
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
            height: 80px;
        }

        .navbar-brand {
            font-family: 'Marcellus', serif;
            font-size: 1.8rem;
            color: #1a1a1a;
            position: relative;
        }

        .brand-dot {
            position: absolute;
            right: -12px;
            bottom: 8px;
            width: 8px;
            height: 8px;
            background: #1a1a1a;
            border-radius: 50%;
        }

        .navbar-nav .nav-link {
            font-size: 0.9rem;
            font-weight: 500;
            padding: 0.5rem 1.2rem !important;
            position: relative;
        }

        .navbar-nav .nav-link::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 50%;
            width: 0;
            height: 2px;
            background: #1a1a1a;
            transition: all 0.3s ease;
            transform: translateX(-50%);
        }

        .navbar-nav .nav-link:hover::after,
        .navbar-nav .nav-link.active::after {
            width: 80%;
        }

        .nav-icons {
            display: flex;
            align-items: center;
            gap: 1.5rem;
        }

        .nav-icon {
            color: #1a1a1a;
            font-size: 1.2rem;
            transition: all 0.3s ease;
            position: relative;
        }

        .nav-icon:hover {
            color: #666;
            transform: translateY(-2px);
        }

        .icon-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background: #1a1a1a;
            color: white;
            font-size: 0.7rem;
            padding: 0.2rem 0.5rem;
            border-radius: 50%;
            min-width: 18px;
            height: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Custom Toggler */
        .navbar-toggler {
            border: none;
            padding: 0;
            width: 30px;
            height: 20px;
            position: relative;
        }

        .toggler-icon {
            position: absolute;
            width: 100%;
            height: 2px;
            background: #1a1a1a;
            transition: all 0.3s ease;
        }

        .toggler-icon::before,
        .toggler-icon::after {
            content: '';
            position: absolute;
            width: 100%;
            height: 2px;
            background: #1a1a1a;
            transition: all 0.3s ease;
        }

        .toggler-icon::before {
            top: -6px;
        }

        .toggler-icon::after {
            bottom: -6px;
        }

        /* Mobile Responsive */
        @media (max-width: 991px) {
            .navbar-collapse {
                padding: 1rem;
                margin-top: 0.5rem;
            }

            .nav-icons {
                margin-top: 1rem;
                justify-content: center;
            }

            .navbar-nav {
                text-align: center;
            }
        }

        /* Sidebar Styles */
        .container {
            display: flex;
            gap: 2rem;
            padding: 2rem;
            max-width: 1200px;
            margin: 0 auto;
        }

        .sidebar {
            flex: 0 0 200px;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .sidebar-btn {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem;
            background: white;
            border-radius: 8px;
            text-decoration: none;
            color: #333;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .sidebar-btn:hover {
            background: #f0f0f0;
            transform: translateX(5px);
        }

        .sidebar-btn.active {
            background: #4CAF50;
            color: white;
        }

        .sidebar-btn i {
            width: 20px;
            text-align: center;
        }

        .main-content {
            flex: 1;
        }

        /* Updated Header Styles */
        .content-header {
            margin-bottom: 2rem;
        }

        .content-header h1 {
            font-size: 24px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 0.5rem;
        }

        .content-header p {
            font-size: 14px;
            color: #7f8c8d;
            margin: 0;
        }

        /* Remove old header styles */
        .dashboard-header {
            display: none;
        }

        /* Adjust existing styles */
        .main-container {
            padding: 0;
        }

        .pagination {
            margin: 20px 0;
        }

        .page-link {
            color: #333;
            background-color: #fff;
            border: 1px solid #dee2e6;
        }

        .page-item.active .page-link {
            background-color: #333;
            border-color: #333;
            color: #fff;
        }

        .page-item.disabled .page-link {
            color: #6c757d;
            pointer-events: none;
            background-color: #fff;
            border-color: #dee2e6;
        }

        .page-link:hover {
            color: #000;
            background-color: #e9ecef;
            border-color: #dee2e6;
        }
    </style>
</head>

<body>

    <nav class="navbar navbar-expand-lg navbar-light bg-white fixed-top">
        <div class="container">
            <a class="navbar-brand" href="/">
                LUXE TIME
                <span class="brand-dot"></span>
            </a>

            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav mx-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/shope">Shop</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/men">Men</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/women">Women</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/limited-edition">Limited Edition</a>
                    </li>
                </ul>

                <div class="nav-icons">
                    <a href="/search" class="nav-icon">
                        <i class="fas fa-search"></i>
                    </a>
                    <a href="/wishlist" class="nav-icon">
                        <i class="fas fa-heart"></i>
                    </a>
                    <a href="/cart" class="nav-icon">
                        <i class="fas fa-shopping-cart"></i>
                    </a>
                    <a href="/profile" class="nav-icon">
                        <i class="fas fa-user"></i>
                    </a>
                </div>
            </div>
        </div>
    </nav>

    <div class="container">

        <div class="sidebar">
            <a href="/profile" class="sidebar-btn">
                <i class="fas fa-user"></i>
                <span>Profile</span>
            </a>
            <a href="/address" class="sidebar-btn">
                <i class="fas fa-map-marker-alt"></i>
                <span>Addresses</span>
            </a>
            <a href="/orders" class="sidebar-btn active">
                <i class="fas fa-shopping-bag"></i>
                <span>Orders</span>
            </a>
            <a href="/wallet" class="sidebar-btn">
                <i class="fas fa-wallet"></i>
                <span>Wallet</span>
            </a>
        </div>


        <div class="main-content">
            <div class="content-header">
                <h1>My Orders</h1>
                <p class="text-muted">View and manage your order history</p>
            </div>

            <% if (!orders || orders.length===0) { %>
                <div class="empty-state">
                    <div class="empty-state-icon">
                        <i class="fas fa-shopping-bag"></i>
                    </div>
                    <h3>No Orders Yet</h3>
                    <p>Looks like you haven't made any orders yet</p>
                    <a href="/shope" class="btn btn-primary">
                        Start Shopping <i class="fas fa-arrow-right ms-2"></i>
                    </a>
                </div>
                <% } else { %>
                    <div class="orders-grid">
                        <% orders.forEach(order=> { %>
                            <div class="order-card" data-individual-orders-id="<%= order.individualOrdersId %>"
                                data-status="<%= order.status %>" data-customer-name="<%= order.address?.fullName %>"
                                data-customer-email="<%= order.address?.email %>"
                                data-customer-phone="<%= order.address?.phone %>"
                                data-street="<%= order.address?.street %>" data-city="<%= order.address?.city %>"
                                data-state="<%= order.address?.state %>" data-zip-code="<%= order.address?.zipCode %>">
                                <div class="order-card-header">
                                    <div class="order-info">
                                        <span class="order-number">#<%= order.orderId.toString().slice(-8).toUpperCase()
                                                %>
                                        </span>
                                        <span class="order-date">
                                            <i class="far fa-calendar-alt"></i>
                                            <%= new Date(order.createdAt).toLocaleDateString('en-US', { year: 'numeric'
                                                , month: 'long' , day: 'numeric' }) %>
                                        </span>
                                    </div>
                                    <div class="status-badge status-<%= (order.paymentStatus || 'pending').toLowerCase() %>">
                                        
                                        <%= order.paymentStatus || 'Pending' %>
                                    </div>
                                </div>
                                <div class="order-products">
                                    <div class="product-card">
                                        <img src="<%= order.productImage %>" alt="<%= order.productName %>">
                                        <div class="product-details">
                                            <h4>
                                                <%= order.productName %>
                                            </h4>
                                            <p class="color">Color: <%= order.color %></p>
                                            <p class="quantity">Qty: <%= order.quantity %></p>
                                
                                            <p class="address" hidden>
                                                <%= address %>
                                            </p>
                                
                                            <p class="price">$<%= order.totalAmount?.toFixed(2) %></p>
                                
                                            <% if (order.paymentMethod === 'razorpay') { %>
                                                <p class="status">Status: <%= order.status || 'Pending' %></p>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>
                                

                                <div class="order-card-footer">
                                    <div class="action-buttons d-flex align-items-center gap-2">
                                        <button class="btn btn-outline-primary"
                                            onclick="showTrackingModal('<%= order.individualOrdersId %>')">
                                            <i class="fas fa-truck"></i> Track
                                        </button>
                                        <% if (order.paymentStatus === 'Payment Failed') { %>
                                            <button class="btn btn-outline-success" onclick="handlePayment('<%= order.orderId %>', '<%= order.totalAmount %>')">
                                                <i class="fas fa-credit-card"></i> Pay Now
                                            </button>
                                        <% } %>
                                        <% if (order.status === 'Delivered') { %>
                                            <button class="btn btn-outline-secondary"
                                                onclick="generateInvoice('<%= order.individualOrdersId %>')">
                                                <i class="fas fa-download"></i> Invoice
                                            </button>
                                        <% } %>
                                        <% if (order.status !=='Delivered' && order.status !=='Cancelled' &&
                                            order.status !=='Returned' && order.status !=='Return Approved' &&
                                            order.status !=='Return Canceled' ) { %>
                                            <button type="button" class="btn btn-outline-danger"
                                                onclick="showCancelModal('<%= order.individualOrdersId %>', '<%= order.orderId %>')">
                                                <i class="fas fa-times"></i> Cancel
                                            </button>
                                            <% } %>
                                                <% if (order.status==='Delivered' ) { %>
                                                    <button class="btn btn-outline-warning"
                                                        onclick="returnOrder('<%= order.orderId %>', '<%= order.productId %>')">
                                                        <i class="fas fa-undo"></i> Return
                                                    </button>
                                                    <% } %>
                                    </div>
                                </div>
                            </div>
                            <% }); %>
                    </div>
                    <% } %>


                        <!-- Add this after your orders list -->
                        <% if (totalPages> 0) { %>
                            <nav aria-label="Page navigation" class="mt-4">
                                <ul class="pagination justify-content-center">
                                    <!-- Previous button -->
                                    <li class="page-item <%= !hasPrevPage ? 'disabled' : '' %>">
                                        <a class="page-link" href="/orders?page=<%= currentPage - 1 %>"
                                            tabindex="-1">Previous</a>
                                    </li>


                                    <!-- Page numbers -->
                                    <% for(let i=1; i <=totalPages; i++) { %>
                                        <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                                            <a class="page-link" href="/orders?page=<%= i %>">
                                                <%= i %>
                                            </a>
                                        </li>
                                        <% } %>

                                            <!-- Next button -->
                                            <li class="page-item <%= !hasNextPage ? 'disabled' : '' %>">
                                                <a class="page-link" href="/orders?page=<%= currentPage + 1 %>">Next</a>
                                            </li>
                                </ul>
                            </nav>
                            <% } %>
        </div>
    </div>


    <div class="modal fade" id="trackingModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Track Your Order</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="tracking-timeline" id="trackingTimeline">

                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="cancelReasonModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Reason for Cancellation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="cancelOrderForm" method="POST">
                        <div class="mb-3">
                            <label for="cancelReason" class="form-label">Please select a reason:</label>
                            <select class="form-select" id="cancelReason" name="cancelReason">
                                <option value="">Choose a reason</option>
                                <option value="Changed my mind">Changed my mind</option>
                                <option value="Found better price elsewhere">Found better price elsewhere</option>
                                <option value="Ordered by mistake">Ordered by mistake</option>
                                <option value="Shipping time too long">Shipping time too long</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        <div class="mb-3" id="otherReasonDiv" style="display: none;">
                            <label for="otherReason" class="form-label">Please specify:</label>
                            <textarea class="form-control" id="otherReason" name="otherReason" rows="3"></textarea>
                        </div>
                        <div class="text-end">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-danger">Cancel Order</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="returnReasonModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Reason for Return</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="returnOrderForm" method="POST">
                        <div class="mb-3">
                            <label for="returnReason" class="form-label">Please select a reason:</label>
                            <select class="form-select" id="returnReason" name="returnReason" required>
                                <option value="">Choose a reason</option>
                                <option value="Wrong size">Wrong size</option>
                                <option value="Defective product">Defective product</option>
                                <option value="Not as described">Not as described</option>
                                <option value="Changed my mind">Changed my mind</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        <div class="mb-3" id="returnOtherReasonDiv" style="display: none;">
                            <label for="returnOtherReason" class="form-label">Please specify:</label>
                            <textarea class="form-control" id="returnOtherReason" name="returnOtherReason"
                                rows="3"></textarea>
                        </div>
                        <div class="text-end">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-warning">Submit Return Request</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function showTrackingModal(orderId) {
            const trackingModal = new bootstrap.Modal(document.getElementById('trackingModal'));
            const trackingTimeline = document.getElementById('trackingTimeline');


            const steps = [
                { status: 'Pending', icon: 'clock', description: 'Order is pending confirmation' },
                { status: 'Placed', icon: 'box', description: 'Your order has been placed' },
                { status: 'Confirmed', icon: 'check', description: 'Order confirmed' },
                { status: 'Shipped', icon: 'truck', description: 'Order shipped' },
                { status: 'Delivered', icon: 'home', description: 'Package delivered' },
                { status: 'Cancelled', icon: 'times', description: 'Order has been cancelled' }
            ];


            const orderElement = document.querySelector(`[data-individual-orders-id="${orderId}"]`);
            const currentStatus = orderElement.getAttribute('data-status');


            trackingTimeline.innerHTML = '';


            if (currentStatus === 'Cancelled') {
                const cancelledStep = `
                    <div class="timeline-step active">
                        <div class="step-icon"><i class="fas fa-times"></i></div>
                        <div class="step-info">
                            <h6>Cancelled</h6>
                            <p>Order has been cancelled</p>
                        </div>
                    </div>
                `;
                trackingTimeline.innerHTML = cancelledStep;
                trackingModal.show();
                return;
            }


            steps.forEach((step) => {

                if (step.status === 'Cancelled') return;

                const stepStatus = getStepStatus(currentStatus, step.status);
                if (stepStatus !== null) {
                    const stepHtml = `
                        <div class="timeline-step ${stepStatus}">
                            <div class="step-icon"><i class="fas fa-${step.icon}"></i></div>
                            <div class="step-info">
                                <h6>${step.status}</h6>
                                <p>${step.description}</p>
                            </div>
                        </div>
                    `;
                    trackingTimeline.innerHTML += stepHtml;
                }
            });

            trackingModal.show();
        }

        function getStepStatus(currentStatus, stepStatus) {
            const statusOrder = ['Pending', 'Placed', 'Confirmed', 'Shipped', 'Delivered'];
            const currentIndex = statusOrder.indexOf(currentStatus);
            const stepIndex = statusOrder.indexOf(stepStatus);


            if (currentIndex === -1 || stepIndex === -1) return null;

            if (currentStatus === 'Delivered') {
                if (stepStatus === 'Delivered') return 'active';
                return 'completed';
            }

            if (stepIndex < currentIndex) return 'completed';
            if (stepIndex === currentIndex) return 'active';
            if (stepIndex > currentIndex) return '';

            return null;
        }

        function returnOrder(orderId, productId) {
            const returnModal = new bootstrap.Modal(document.getElementById('returnReasonModal'));
            const form = document.getElementById('returnOrderForm');

            form.action = `/return/${orderId}/${productId}`;

            returnModal.show();
        }

        function showCancelModal(individualOrdersId, orderId) {
            const cancelModal = new bootstrap.Modal(document.getElementById('cancelReasonModal'));
            const form = document.getElementById('cancelOrderForm');

            form.action = `/orders/cancel?individualOrdersId=${individualOrdersId}&orderId=${orderId}`;

            cancelModal.show();
        }

        function generateInvoice(orderId) {
            try {
                const orderCard = document.querySelector(`[data-individual-orders-id="${orderId}"]`);
                const orderNumber = orderCard.querySelector('.order-number').textContent;
                const orderDate = orderCard.querySelector('.order-date').textContent;
                const productName = orderCard.querySelector('.product-details h4').textContent;
                const productColor = orderCard.querySelector('.color').textContent;
                const productQty = orderCard.querySelector('.quantity').textContent;
                const totalAmount = orderCard.querySelector('.price').textContent;
                const addressText = document.querySelector('.address').textContent.trim();

                const fixedAddressText = addressText
                    .replace(/(\w+):/g, '"$1":') 
                    .replace(/'/g, '"');          

                const address = JSON.parse(fixedAddressText);



                
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();

                
                doc.setProperties({
                    title: `Invoice - ${orderNumber}`,
                    subject: 'Order Invoice',
                    author: 'LUXE TIME',
                    creator: 'LUXE TIME Store'
                });

                
                doc.setFontSize(24);
                doc.setTextColor(26, 26, 26);
                doc.text('LUXE TIME', 20, 20);

                
                doc.setFillColor(26, 26, 26);
                doc.circle(95, 17, 1, 'F');

                
                doc.setFontSize(20);
                doc.text('INVOICE', 20, 40);

                
                doc.setFontSize(10);
                doc.setTextColor(102, 102, 102);
                doc.text(`Order Number: ${orderNumber}`, 20, 55);
                doc.text(`Date: ${orderDate}`, 20, 62);

                
                doc.setDrawColor(230, 230, 230);
                doc.line(20, 70, 190, 70);

                
                doc.setFontSize(12);
                doc.setTextColor(26, 26, 26);
                doc.text('Billing & Shipping Details', 20, 75);

                
                const addressHeaders = [['Details', 'Information']];
                
                const addressData = [
                    ['Full Name', address?.fullName || 'N/A'],
                    ['Phone', address?.phone || 'N/A'],
                    ['Street', address?.street || 'N/A'],
                    ['City', address?.city || 'N/A'],
                    ['State', address?.state || 'N/A'],
                    ['Zip Code', address?.zipCode || 'N/A']
                ];

                
                doc.autoTable({
                    startY: 80,
                    head: addressHeaders,
                    body: addressData,
                    theme: 'grid',
                    headStyles: {
                        fillColor: [26, 26, 26],
                        textColor: 255,
                        fontStyle: 'bold'
                    },
                    styles: {
                        fontSize: 10,
                        cellPadding: 5
                    },
                    columnStyles: {
                        0: { cellWidth: 60 },
                        1: { cellWidth: 100 }
                    }
                });

               
                const productStartY = doc.lastAutoTable.finalY + 20;
                doc.setFontSize(12);
                doc.text('Order Details', 20, productStartY - 10);

               
                const headers = [['Product', 'Color', 'Quantity', 'Price']];
                const data = [[
                    productName,
                    productColor.replace('Color: ', ''),
                    productQty.replace('Qty: ', ''),
                    totalAmount
                ]];

                
                doc.autoTable({
                    startY: productStartY,
                    head: headers,
                    body: data,
                    theme: 'grid',
                    headStyles: {
                        fillColor: [26, 26, 26],
                        textColor: 255,
                        fontStyle: 'bold'
                    },
                    styles: {
                        fontSize: 10,
                        cellPadding: 5
                    }
                });

                
                const finalY = doc.lastAutoTable.finalY + 10;
                doc.setFontSize(10);
                doc.setTextColor(26, 26, 26);
           

                
             

                
                const total = parseFloat(totalAmount.replace('$', '')) ;
                doc.setFontSize(12);
                doc.setFont(undefined, 'bold');
                doc.text('Total:', 140, finalY + 15);
                doc.text(`$${total.toFixed(2)}`, 180, finalY + 15, { align: 'right' });

                
                doc.setFontSize(8);
                doc.setTextColor(128, 128, 128);
                doc.text('Thank you for shopping with LUXE TIME', 20, 270);
                doc.text('For any queries, please contact support@luxetime.com', 20, 275);

                
                doc.save(`invoice-${orderNumber.toLowerCase()}.pdf`);

            } catch (error) {
                console.error('Error generating invoice:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to generate invoice. Please try again.'
                });
            }
        }

        function handlePayment(orderId, amount) {
            Swal.fire({
                title: 'Proceed to Payment',
                text: `Total amount to pay: $${parseFloat(amount).toFixed(2)}`,
                icon: 'info',
                showCancelButton: true,
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Pay Now'
            }).then((result) => {
                if (result.isConfirmed) {
                    
                    fetch(`/create-order/${orderId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.key_id) {
                            throw new Error('Missing Razorpay key');
                        }

                        const options = {
                            key: data.key_id,
                            amount: data.amount,
                            currency: data.currency,
                            name: 'LUXE TIME',
                            description: 'Order Payment',
                            order_id: data.order_id,
                            handler: function (response) {
                                
                                fetch('/verify-failPayment', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_signature: response.razorpay_signature,
                                        order_id: orderId
                                    })
                                })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Payment Successful!',
                                            text: 'Your order has been confirmed.',
                                            showConfirmButton: false,
                                            timer: 1500
                                        }).then(() => {
                                            location.reload();
                                        });
                                    }
                                })
                                .catch(error => {
                                    console.error('Verification error:', error);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Verification Failed',
                                        text: 'Please contact support if amount is deducted'
                                    });
                                });
                            },
                            prefill: {
                                name: data.customerName || '',
                                email: data.email || '',
                                contact: data.phone || ''
                            },
                            theme: {
                                color: '#3399cc'
                            }
                        };

                        const rzp = new Razorpay(options);
                        rzp.on('payment.failed', function (response){
                            Swal.fire({
                                icon: 'error',
                                title: 'Payment Failed',
                                text: 'The payment process failed. Please try again.'
                            });
                        });
                        rzp.open();
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to initiate payment. Please try again.'
                        });
                    });
                }
            });
        }

        document.addEventListener('DOMContentLoaded', function () {
            const cancelReason = document.getElementById('cancelReason');
            const otherReasonDiv = document.getElementById('otherReasonDiv');
            const cancelOrderForm = document.getElementById('cancelOrderForm');

            cancelReason.addEventListener('change', function () {
                otherReasonDiv.style.display = this.value === 'Other' ? 'block' : 'none';
            });

            cancelOrderForm.addEventListener('submit', function (e) {
                e.preventDefault();

                const reason = cancelReason.value;
                const otherReason = document.getElementById('otherReason')?.value || '';
                const additionalComments = document.getElementById('additionalComments')?.value || '';
                const finalReason = reason === 'Other' ? otherReason : reason;

                Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you want to cancel this order?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, cancel it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        const formData = new FormData();
                        formData.append('reason', finalReason);
                        formData.append('comments', additionalComments);

                        fetch(this.action, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'Accept': 'application/json'
                            },
                            body: new URLSearchParams(formData)
                        })
                            .then(async response => {
                                if (response.redirected) {
                                    window.location.href = response.url;
                                    return null;
                                }

                                const contentType = response.headers.get('content-type');
                                if (contentType && contentType.includes('application/json')) {
                                    const data = await response.json();
                                    if (!response.ok) {
                                        throw new Error(data.message || 'Server error');
                                    }
                                    return data;
                                } else {
                                    if (!response.ok) {
                                        throw new Error('Server error occurred');
                                    }
                                    return { success: true };
                                }
                            })
                            .then(data => {
                                if (data === null) {
                                    return;
                                }
                                if (data && data.success) {
                                    const modal = bootstrap.Modal.getInstance(document.getElementById('cancelReasonModal'));
                                    modal.hide();

                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Cancel Request Sent!',
                                        text: 'Your cancellation request has been submitted successfully.',
                                        showConfirmButton: false,
                                        timer: 1500
                                    }).then(() => {
                                        location.reload();
                                    });
                                } else {
                                    throw new Error(data?.message || 'Failed to cancel order');
                                }
                            })
                            .catch(error => {
                                console.error('Error details:', error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: `Failed to cancel order: ${error.message}`
                                });
                            });
                    }
                });
            });

            const returnReason = document.getElementById('returnReason');
            const returnOtherReasonDiv = document.getElementById('returnOtherReasonDiv');
            const returnOrderForm = document.getElementById('returnOrderForm');

            returnReason.addEventListener('change', function () {
                returnOtherReasonDiv.style.display = this.value === 'Other' ? 'block' : 'none';
            });

            returnOrderForm.addEventListener('submit', function (e) {
                e.preventDefault();

                const reason = returnReason.value;
                const otherReason = document.getElementById('returnOtherReason')?.value || '';
                const finalReason = reason === 'Other' ? otherReason : reason;

                if (!finalReason) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Required',
                        text: 'Please provide a reason for return'
                    });
                    return;
                }

                Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you want to return this product?",
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, return it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        const formData = new FormData();
                        formData.append('reason', finalReason);

                        fetch(this.action, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'Accept': 'application/json'
                            },
                            body: new URLSearchParams(formData)
                        })
                            .then(async response => {
                                if (response.redirected) {
                                    window.location.href = response.url;
                                    return null;
                                }

                                const contentType = response.headers.get('content-type');
                                if (contentType && contentType.includes('application/json')) {
                                    const data = await response.json();
                                    if (!response.ok) {
                                        throw new Error(data.message || 'Server error');
                                    }
                                    return data;
                                } else {
                                    if (!response.ok) {
                                        throw new Error('Server error occurred');
                                    }
                                    return { success: true };
                                }
                            })
                            .then(data => {
                                if (data === null) {
                                    return;
                                }
                                if (data && data.success) {
                                    const modal = bootstrap.Modal.getInstance(document.getElementById('returnReasonModal'));
                                    modal.hide();

                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Success!',
                                        text: 'Return request submitted successfully',
                                        showConfirmButton: false,
                                        timer: 1500
                                    }).then(() => {
                                        location.reload();
                                    });
                                } else {
                                    throw new Error(data?.message || 'Failed to submit return request');
                                }
                            })
                            .catch(error => {
                                console.error('Error details:', error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: `Failed to submit return request: ${error.message}`
                                });
                            });
                    }
                });
            });

            
            const invoiceButtons = document.querySelectorAll('.btn-outline-secondary');
            invoiceButtons.forEach(button => {
                button.onclick = function () {
                    const orderCard = this.closest('.order-card');
                    const orderId = orderCard.dataset.individualOrdersId;
                    generateInvoice(orderId);
                };
            });
        });
    </script>
</body>

</html>