<!DOCTYPE html>
<html lang="en">

<head>
  <title>LUXE TIME WORLD</title>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="format-detection" content="telephone=no">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="author" content="TemplatesJungle">
  <meta name="keywords" content="ecommerce,fashion,store">
  <meta name="description" content="Bootstrap 5 Fashion Store HTML CSS Template">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
  <link href="/css/vendor.css" rel="stylesheet" type="text/css">
  <link href="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css" rel="stylesheet">
  <link href="/style.css" rel="stylesheet" type="text/css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link
    href="https://fonts.googleapis.com/css2?family=Jost:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&family=Marcellus&display=swap"
    rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="/styles/userShope.css">

  <style>
    .dis{
      color: white !important;
    }
    /* Hamburger menu styles */
    .hamburger-menu {
      display: none;
    }
    
    @media (max-width: 991px) {
      .navbar > .container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: nowrap;
      }
      
      .navbar-brand {
        flex: 0 0 auto;
        margin-right: 0;
      }
      
      .hamburger-menu {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 30px;
        height: 30px;
        position: relative;
        cursor: pointer;
        z-index: 1000;
      }
      
      .hamburger-menu span {
        display: block;
        position: absolute;
        height: 3px;
        width: 100%;
        background: #333;
        border-radius: 3px;
        opacity: 1;
        left: 0;
        transform: rotate(0deg);
        transition: .25s ease-in-out;
      }
      
      .hamburger-menu span:nth-child(1) {
        top: 6px;
      }
      
      .hamburger-menu span:nth-child(2) {
        top: 14px;
      }
      
      .hamburger-menu span:nth-child(3) {
        top: 22px;
      }
      
      .hamburger-menu.open span:nth-child(1) {
        top: 14px;
        transform: rotate(135deg);
      }
      
      .hamburger-menu.open span:nth-child(2) {
        opacity: 0;
        left: -60px;
      }
      
      .hamburger-menu.open span:nth-child(3) {
        top: 14px;
        transform: rotate(-135deg);
      }
      
      #navbarContent {
        position: fixed;
        top: 80px;
        left: -100%;
        width: 100%;
        height: calc(100vh - 80px);
        background: white;
        overflow-y: auto;
        transition: 0.3s ease-in-out;
        padding: 20px;
        z-index: 999;
      }
      
      #navbarContent.show {
        left: 0;
      }
      
      .navbar-nav {
        flex-direction: column;
        width: 100%;
        align-items: center;
        padding-left: 0;
        text-align: center;
      }
      
      .nav-item {
        margin: 15px 0;
        width: 100%;
        text-align: center;
      }
      
      .nav-link {
        font-size: 16px;
        padding: 8px 0;
        display: inline-block;
      }
      
      .nav-link.active {
        font-weight: 500;
        position: relative;
      }
      
      .nav-link.active::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 80%;
        height: 1px;
        background-color: #333;
      }
      
      .nav-icons {
        margin-top: 30px;
        justify-content: center !important;
        padding-left: 0;
        width: 100%;
        display: flex;
      }
      
      .nav-icon {
        margin-right: 30px;
        font-size: 18px;
      }
      
      /* Mobile navbar controls layout */
      .search-container.d-flex {
        order: 1;
        margin-left: auto;
        margin-right: 15px;
      }
      
      .hamburger-menu {
        order: 2;
      }
    }
  </style>
</head>

<body class="shop-page">

  <nav class="navbar navbar-expand-lg fixed-top bg-white">
    <div class="container">
      <!-- Brand -->
      <a class="navbar-brand" href="/">
        LUXE TIME
      
      </a>

      <!-- Search Container moved outside hamburger menu -->
      <div class="search-container d-flex d-lg-none">
        <input type="text" id="searchInputMobile" class="search-input" placeholder="Search products...">
        <a href="javascript:void(0);" class="nav-icon search-icon" title="Search">
          <i class="fas fa-search"></i>
        </a>
      </div>

      <!-- Custom Hamburger Menu for Mobile -->
      <div class="hamburger-menu d-lg-none">
        <span></span>
        <span></span>
        <span></span>
      </div>

      <!-- Navigation Content -->
      <div class="collapse navbar-collapse" id="navbarContent">
        <!-- Main Menu -->
        <ul class="navbar-nav mx-auto text-uppercase">
          <li class="nav-item">
            <a class="nav-link" href="/">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" href="/shope">Shop</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/men">BLOG</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/women">CONTACT</a>
          </li>
        </ul>

        <!-- Right Icons -->
        <div class="nav-icons">
          <div class="search-container d-none d-lg-flex">
            <input type="text" id="searchInput" class="search-input" placeholder="Search products...">
            <a href="javascript:void(0);" class="nav-icon search-icon" title="Search">
              <i class="fas fa-search"></i>
            </a>
          </div>
          <a href="/wishlist" class="nav-icon" title="Wishlist">
            <i class="fas fa-heart"></i>

          </a>
          <a href="/cart" class="nav-icon" title="Cart">
            <i class="fas fa-shopping-cart"></i>

          </a>
          <a href="/account" class="nav-icon" title="Account">
            <i class="fas fa-user"></i>
          </a>
        </div>
      </div>
    </div>
  </nav>


  <section class="shop-header bg-light py-5" style="margin-top: 80px;">
    <!-- Your existing shop header content -->
  </section>

  <section class="shop-header bg-light py-5">
    <div class="container">
      <div class="row">
        <div class="col-md-12 text-center">
          <h1 class="section-title">Select Your LUXE TIME</h1>
          <p>Explore our latest collections and find your perfect style.</p>
        </div>
      </div>
    </div>
  </section>

  <section class="shop-content py-5">
    <div class="container">
      <div class="row">
        <!-- Sidebar for filters -->
        <div class="col-md-3">
          <div class="sidebar">
            <h5 class="sidebar-title">Filters</h5>
            <div class="filter-section">
              <h6>Category</h6>
              <ul class="list-unstyled">
                <li>
                  <a href="/shope" class="category-filter <%= !selectedCategory ? 'active' : '' %>">
                    All Categories
                  </a>
                </li>
                <% categories.forEach(category => { %>
                  <li>
                    <a href="/shope?category=<%= category._id %>" 
                       class="category-filter <%= selectedCategory === category._id.toString() ? 'active' : '' %>">
                      <%= category.name %>
                    </a>
                  </li>
                <% }) %>
              </ul>
            </div>
            <div class="filter-section">
              <h6>Price Range</h6>
              <input type="range" class="form-range" id="priceRange" min="0" max="100000" step="1000" value="100000">
              <div class="d-flex justify-content-between">
                <span>$0</span>
                <span id="maxPriceDisplay">$100000</span>
              </div>
              <div class="mt-2" id="priceFilterIndicator" style="display: none;">
                <small class="text-muted">Filtering products up to: <span id="currentPriceFilter"></span></small>
              </div>
            </div>
            <div class="filter-section">
              <h6>Sort By</h6>
              <select class="form-select" id="sortSelect">
                <option value="">Default (Newest First)</option>
                <option value="price_asc">Price: Low to High</option>
                <option value="price_desc">Price: High to Low</option>
                <option value="newest">Newest Arrivals</option>
              </select>
              <div class="mt-2" id="sortIndicator" style="display: none;">
                <small class="text-muted">Sorting by: <span id="currentSortMethod"></span></small>
              </div>
            </div>
            <button class="btn btn-secondary mt-3" id="resetFilters">Reset Filters</button>
          </div>
        </div>

        <!-- Product Grid -->
        <div class="col-md-9">
          <div class="row">
            <% products.forEach(product=> { %>
              <div class="col-md-4 mb-4">
                <div class="product-item image-zoom-effect link-effect">
                  <div class="image-holder">
                    <a href="/product/<%= product._id %>">
                      <img src="/<%= product.imagePaths[0] %>" alt="<%= product.productName %>"
                        class="product-image img-fluid">
                    </a>
                  </div>
                  <div class="product-content">
                    <h5 class="text-uppercase fs-5 mt-3">
                      <a href="/product/<%= product._id %>">
                        <%= product.productName %>
                      </a>
                    </h5>
                    <div class="price mb-3">
                      <% if (product.offerPrice) { %>
                          <span class="original-price text-muted">
                              <del>$<%= product.price.toFixed(2) %></del>
                          </span>
                          <span class="offer-price text-success">
                              $<%= product.offerPrice %>
                          </span>
                          <% const discountPercentage = Math.round((1 - product.offerPrice / product.price) * 100); %>
                          <span class="discount-badge text-danger">-<%= discountPercentage %>%</span>
                      <% } else { %>
                          <span class="regular-price">$<%= product.price.toFixed(2) %></span>
                      <% } %>
                  </div>
                  </div>
                </div>
              </div>
              <% }) %>
          </div>
          
          <div class="pagination-container mt-5">
            <% if (totalPages> 1) { %>
              <nav aria-label="Product pagination" class="d-flex justify-content-center">
                <ul class="pagination pagination-lg">
               
                  <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                    <a class="page-link" href="?page=<%= currentPage - 1 %><%= selectedCategory ? '&category=' + selectedCategory : '' %>" aria-label="Previous">
                      <span aria-hidden="true">‹</span>
                    </a>
                  </li>

                 
                  <% if (currentPage> 2) { %>
                    <li class="page-item">
                      <a class="page-link" href="?page=1">1</a>
                    </li>
                    <% if (currentPage> 3) { %>
                      <li class="page-item disabled">
                        <span class="page-link">...</span>
                      </li>
                      <% } %>
                        <% } %>

                          
                          <% for(let i=Math.max(1, currentPage - 1); i <=Math.min(totalPages, currentPage + 1); i++) {
                            %>
                            <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                              <a class="page-link" href="?page=<%= i %><%= selectedCategory ? '&category=' + selectedCategory : '' %>">
                                <%= i %>
                              </a>
                            </li>
                            <% } %>

                            
                              <% if (currentPage < totalPages - 1) { %>
                                <% if (currentPage < totalPages - 2) { %>
                                  <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                  </li>
                                  <% } %>
                                    <li class="page-item">
                                      <a class="page-link" href="?page=<%= totalPages %>">
                                        <%= totalPages %>
                                      </a>
                                    </li>
                                    <% } %>

                                      
                                      <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                                        <a class="page-link" href="?page=<%= currentPage + 1 %><%= selectedCategory ? '&category=' + selectedCategory : '' %>" aria-label="Next">
                                          <span aria-hidden="true">›</span>
                                        </a>
                                      </li>
                </ul>
              </nav>
              <% } %>
          </div>

        </div>
      </div>
    </div>
  </section>

  
  <footer id="footer" class="mt-5">
   
  </footer>

  <script src="/js/jquery.min.js"></script>
  <script src="/js/plugins.js"></script>
  <script src="/js/SmoothScroll.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.js"></script>
  <script src="/js/script.min.js"></script>
  <script>
    async function addToCart(productId) {
      const selectedColor = document.querySelector(`input[name="color_${productId}"]:checked`);

      if (!selectedColor) {
        alert("Please select a color!");
        return;
      }

      const colorValue = selectedColor.value;

      try {
        const response = await fetch('/cart', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ productId, color: colorValue })
        });

        const data = await response.json();

        if (data.success) {
          alert('Item added to cart!');
          updateCartUI(data.cart);
        } else {
          alert(data.message);
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Something went wrong!');
      }
    }

    function updateCartUI(cart) {
      const cartCount = document.getElementById('cart-count');
      if (cartCount) {
        cartCount.textContent = cart.items.length;
      }
    }

    async function addToWishlist(productId) {
      const selectedColor = document.querySelector(`input[name="color_${productId}"]:checked`);

      if (!selectedColor) {
        alert("Please select a color!");
        return;
      }

        const colorValue = selectedColor.value;

      try {
        const response = await fetch('/wishlist', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ productId, color: colorValue })
        });

        const data = await response.json();

        if (data.success) {
          alert('Item added to wishlist!');
         
        } else {
          alert(data.message || 'Failed to add to wishlist');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Something went wrong!');
      }
    }
  </script>

  <style>
    .category-filter.active {
      color: #007bff;
      font-weight: bold;
    }
    .category-filter {
      color: #333;
      text-decoration: none;
      padding: 5px 0;
      display: block;
      transition: all 0.3s ease;
    }
    .category-filter:hover {
      color: #007bff;
    }
  </style>

  <script>
  document.addEventListener('DOMContentLoaded', function() {
      const searchContainer = document.querySelector('.search-container');
      const searchInput = document.getElementById('searchInput');
      const searchInputMobile = document.getElementById('searchInputMobile');
      const searchIcon = document.querySelectorAll('.search-icon');
      const productGrid = document.querySelector('.col-md-9 .row');
      const paginationContainer = document.querySelector('.pagination-container');
      const priceRange = document.getElementById('priceRange');
      const sortSelect = document.getElementById('sortSelect');
      const resetFiltersBtn = document.getElementById('resetFilters');
      
      let currentFilters = {
          category: new URLSearchParams(window.location.search).get('category') || '',
          minPrice: '',
          maxPrice: '',
          sort: '',
          page: new URLSearchParams(window.location.search).get('page') || 1,
          search: ''
      };

      //
      function initializeFiltersFromURL() {
          const urlParams = new URLSearchParams(window.location.search);
          currentFilters = {
              category: urlParams.get('category') || '',
              minPrice: urlParams.get('minPrice') || '',
              maxPrice: urlParams.get('maxPrice') || '',
              sort: urlParams.get('sort') || '',
              page: urlParams.get('page') || 1,
              search: urlParams.get('search') || ''
          };

          
          if (currentFilters.maxPrice) {
              priceRange.value = currentFilters.maxPrice;
              document.getElementById('maxPriceDisplay').textContent = '$' + currentFilters.maxPrice;
              
              
              const priceFilterIndicator = document.getElementById('priceFilterIndicator');
              const currentPriceFilter = document.getElementById('currentPriceFilter');
              
              if (parseInt(currentFilters.maxPrice) < parseInt(priceRange.max)) {
                  currentPriceFilter.textContent = '$' + currentFilters.maxPrice;
                  priceFilterIndicator.style.display = 'block';
              }
          } else {
              
              document.getElementById('maxPriceDisplay').textContent = '$' + priceRange.max;
          }
          
          if (currentFilters.sort) {
              sortSelect.value = currentFilters.sort;
              
              const sortIndicator = document.getElementById('sortIndicator');
              const currentSortMethod = document.getElementById('currentSortMethod');
              const selectedOption = sortSelect.options[sortSelect.selectedIndex].text;
              currentSortMethod.textContent = selectedOption;
              sortIndicator.style.display = 'block';
          }
          
          if (currentFilters.search) {
              searchInput.value = currentFilters.search;
              searchInput.classList.add('active');
              searchInputMobile.value = currentFilters.search;
              searchInputMobile.classList.add('active');
          }
      }

      
      priceRange.addEventListener('input', function() {
          
          document.getElementById('maxPriceDisplay').textContent = '$' + this.value;
      });
      
      priceRange.addEventListener('change', function() {
          
          currentFilters.maxPrice = this.value;
          currentFilters.page = 1; 
          document.getElementById('maxPriceDisplay').textContent = '$' + this.value;
          
          
          const priceFilterIndicator = document.getElementById('priceFilterIndicator');
          const currentPriceFilter = document.getElementById('currentPriceFilter');
          
          if (parseInt(this.value) < parseInt(this.max)) {
              currentPriceFilter.textContent = '$' + this.value;
              priceFilterIndicator.style.display = 'block';
          } else {
              priceFilterIndicator.style.display = 'none';
          }
          
          applyFilters();
      });

      sortSelect.addEventListener('change', function() {
          currentFilters.sort = this.value;
          currentFilters.page = 1;
          
          
          const sortIndicator = document.getElementById('sortIndicator');
          const currentSortMethod = document.getElementById('currentSortMethod');
          
          if (this.value) {
              const selectedOption = this.options[this.selectedIndex].text;
              currentSortMethod.textContent = selectedOption;
              sortIndicator.style.display = 'block';
          } else {
              sortIndicator.style.display = 'none';
          }
          
          applyFilters();
      });

      resetFiltersBtn.addEventListener('click', function() {
          currentFilters = {
              category: '',
              minPrice: '',
              maxPrice: '',
              sort: '',
              page: 1,
              search: ''
          };
          priceRange.value = priceRange.max;
          document.getElementById('maxPriceDisplay').textContent = '$' + priceRange.max;
          document.getElementById('priceFilterIndicator').style.display = 'none';
          sortSelect.value = '';
          document.getElementById('sortIndicator').style.display = 'none';
          searchInput.value = '';
          searchInput.classList.remove('active');
          searchInputMobile.value = '';
          searchInputMobile.classList.remove('active');
          applyFilters();
      });

      
      // Handle search icons click for both desktop and mobile
      searchIcon.forEach(icon => {
          icon.addEventListener('click', function(e) {
              e.preventDefault();
              const container = this.closest('.search-container');
              const input = container.querySelector('.search-input');
              input.classList.toggle('active');
              if (input.classList.contains('active')) {
                  input.focus();
              } else {
                  input.value = '';
                  currentFilters.search = '';
                  applyFilters();
              }
          });
      });

      // Function to handle search input with debounce
      function setupSearchInput(input) {
          let debounceTimer;
          input.addEventListener('input', function() {
              clearTimeout(debounceTimer);
              debounceTimer = setTimeout(() => {
                  const searchValue = this.value.trim();
                  currentFilters.search = searchValue;
                  currentFilters.page = 1;
                  
                  // Sync other search input
                  if (this === searchInput) {
                      searchInputMobile.value = searchValue;
                  } else {
                      searchInput.value = searchValue;
                  }
                  
                  if (searchValue.length >= 2 || searchValue.length === 0) {
                      applyFilters();
                  }
              }, 300);
          });
          
          input.addEventListener('keypress', function(e) {
              if (e.key === 'Enter') {
                  currentFilters.search = this.value.trim();
                  currentFilters.page = 1;
                  
                  // Sync other search input
                  if (this === searchInput) {
                      searchInputMobile.value = this.value.trim();
                  } else {
                      searchInput.value = this.value.trim();
                  }
                  
                  applyFilters();
              }
          });
      }
      
      // Setup search for both inputs
      setupSearchInput(searchInput);
      setupSearchInput(searchInputMobile);

      
      async function applyFilters() {
          try {
              
              productGrid.innerHTML = '<div class="col-12 text-center my-5"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>';
              
              
              const params = new URLSearchParams();
              Object.entries(currentFilters).forEach(([key, value]) => {
                  if (value) params.append(key, value);
              });

              
              const newUrl = `${window.location.pathname}?${params.toString()}`;
              window.history.pushState({ filters: currentFilters }, '', newUrl);

              
              let endpoint = '/shope/filter';
              if (currentFilters.search && currentFilters.search.length > 0) {
                  endpoint = '/shope/search';
                  
                  
                  const searchParams = new URLSearchParams();
                  
                  
                  searchParams.set('term', currentFilters.search);
                  
                  
                  if (currentFilters.category) searchParams.set('category', currentFilters.category);
                  if (currentFilters.sort) searchParams.set('sort', currentFilters.sort);
                  if (currentFilters.page) searchParams.set('page', currentFilters.page);
                  if (currentFilters.minPrice) searchParams.set('minPrice', currentFilters.minPrice);
                  if (currentFilters.maxPrice) searchParams.set('maxPrice', currentFilters.maxPrice);
                  
                  const response = await fetch(`${endpoint}?${searchParams.toString()}`);
                  const data = await response.json();
                  
                  if (data.success) {
                      updateProductGrid(data.products);
                      updatePagination(data.pagination);
                  } else {
                      showNoProducts('No products found', 'Try adjusting your search or filters');
                  }
              } else {
                  const response = await fetch(`/shope/filter?${params.toString()}`);
                  const data = await response.json();
                  
                  if (data.success) {
                      updateProductGrid(data.products);
                      updatePagination(data.pagination);
                  } else {
                      showNoProducts('No products found', 'Try adjusting your filters');
                  }
              }
          } catch (error) {
              console.error('Error applying filters:', error);
              showNoProducts('Something went wrong', 'Please try again later');
          }
      }
      
      function showNoProducts(title, message) {
          productGrid.innerHTML = `
              <div class="col-12 text-center">
                  <div class="no-products-message">
                      <h3>${title}</h3>
                      <p>${message}</p>
                  </div>
              </div>
          `;
          paginationContainer.style.display = 'none';
      }

      function updateProductGrid(products) {
          if (!products || products.length === 0) {
              productGrid.innerHTML = `
                  <div class="col-12 text-center">
                      <div class="no-products-message">
                          <h3>No products found</h3>
                          <p>Try adjusting your filters</p>
                      </div>
                  </div>
              `;
              return;
          }

          const html = products.map(product => `
              <div class="col-md-4 mb-4">
                  <div class="product-item image-zoom-effect link-effect">
                      <div class="image-holder">
                          <a href="/product/${product._id}">
                              <img src="/${product.imagePaths[0]}" alt="${product.productName}" 
                                  class="product-image img-fluid">
                          </a>
                      </div>
                      <div class="product-content">
                          <h5 class="text-uppercase fs-5 mt-3">
                              <a href="/product/${product._id}">${product.productName}</a>
                          </h5>
                          <div class="price mb-3">
                              ${product.offerPrice ? 
                                `<span class="original-price text-muted">
                                    <del>$${product.price.toFixed(2)}</del>
                                </span>
                                <span class="offer-price text-success">
                                    $${product.offerPrice}
                                </span>
                                <span class="discount-badge text-danger dis">
                                    -${Math.round((1 - product.offerPrice / product.price) * 100)}%
                                </span>` : 
                                `$${product.price.toFixed(2)}`
                              }
                          </div>
                      </div>
                  </div>
              </div>
          `).join('');
          
          productGrid.innerHTML = html;
      }

      function updatePagination(pagination) {
          if (!pagination || pagination.totalPages <= 1) {
              paginationContainer.style.display = 'none';
              return;
          }

          const { currentPage, totalPages } = pagination;
          let paginationHtml = `
              <nav aria-label="Product pagination" class="d-flex justify-content-center">
                  <ul class="pagination pagination-lg">
                      <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                          <a class="page-link" href="#" data-page="${currentPage - 1}">‹</a>
                      </li>
          `;

          
          if (currentPage > 2) {
              paginationHtml += `
                  <li class="page-item">
                      <a class="page-link" href="#" data-page="1">1</a>
                  </li>
              `;
              if (currentPage > 3) {
                  paginationHtml += `
                      <li class="page-item disabled">
                          <span class="page-link">...</span>
                      </li>
                  `;
              }
          }

          
          for (let i = Math.max(1, currentPage - 1); i <= Math.min(totalPages, currentPage + 1); i++) {
              paginationHtml += `
                  <li class="page-item ${currentPage === i ? 'active' : ''}">
                      <a class="page-link" href="#" data-page="${i}">${i}</a>
                  </li>
              `;
          }

          
          if (currentPage < totalPages - 1) {
              if (currentPage < totalPages - 2) {
                  paginationHtml += `
                      <li class="page-item disabled">
                          <span class="page-link">...</span>
                      </li>
                  `;
              }
              paginationHtml += `
                  <li class="page-item">
                      <a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a>
                  </li>
              `;
          }

          paginationHtml += `
                      <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                          <a class="page-link" href="#" data-page="${currentPage + 1}">›</a>
                      </li>
                  </ul>
              </nav>
          `;

          paginationContainer.innerHTML = paginationHtml;
          paginationContainer.style.display = 'block';

          
          const pageLinks = paginationContainer.querySelectorAll('.page-link');
          pageLinks.forEach(link => {
              link.addEventListener('click', function(e) {
                  e.preventDefault();
                  const pageNum = parseInt(this.dataset.page);
                  if (!isNaN(pageNum)) {
                      currentFilters.page = pageNum;
                      applyFilters();
                  }
              });
          });
      }

      
      window.addEventListener('popstate', function(e) {
          if (e.state && e.state.filters) {
              currentFilters = e.state.filters;
              applyFilters();
          } else {
              initializeFiltersFromURL();
              applyFilters();
          }
      });

      
      initializeFiltersFromURL();
      applyFilters();
  });
  </script>

  <style>
    .no-products-message {
        padding: 50px 20px;
        background: #f8f9fa;
        border-radius: 8px;
        margin: 20px 0;
    }
    .no-products-message h3 {
        color: #333;
        margin-bottom: 10px;
    }
    .no-products-message p {
        color: #666;
    }
    
    /* Search styles */
    .search-container {
      position: relative;
      display: flex;
      align-items: center;
    }
    
    .search-input {
      position: absolute;
      right: 100%;
      width: 0;
      padding: 0;
      border: none;
      border-bottom: 1px solid #ddd;
      background: transparent;
      transition: width 0.3s ease, padding 0.3s ease;
      outline: none;
      font-size: 14px;
    }
    
    .search-input.active {
      width: 200px;
      padding: 5px 10px;
      right: 30px;
    }
    
    .search-icon {
      position: relative;
      z-index: 2;
    }
    
    /* Mobile search styles */
    @media (max-width: 991px) {
      .search-container.d-flex {
        margin-right: 15px;
      }
      
      .search-input.active {
        width: 150px;
      }
    }
  </style>

  <!-- Hamburger Menu Script -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const hamburgerMenu = document.querySelector('.hamburger-menu');
      const navbarContent = document.getElementById('navbarContent');
      
      hamburgerMenu.addEventListener('click', function() {
        this.classList.toggle('open');
        navbarContent.classList.toggle('show');
        document.body.classList.toggle('menu-open');
      });
      
      // Close menu when clicking on a nav link
      const navLinks = document.querySelectorAll('.nav-link');
      navLinks.forEach(link => {
        link.addEventListener('click', function() {
          hamburgerMenu.classList.remove('open');
          navbarContent.classList.remove('show');
          document.body.classList.remove('menu-open');
        });
      });
      
      // Close menu when clicking outside
      document.addEventListener('click', function(event) {
        if (!event.target.closest('.navbar') && 
            !event.target.closest('#navbarContent') && 
            navbarContent.classList.contains('show')) {
          hamburgerMenu.classList.remove('open');
          navbarContent.classList.remove('show');
          document.body.classList.remove('menu-open');
        }
      });
    });
  </script>
</body>

</html>